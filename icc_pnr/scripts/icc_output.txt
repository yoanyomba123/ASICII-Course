Initializing gui preferences from file  /home/dm3233@drexel.edu/.synopsys_icc_prefs.tcl
icc_shell> ls
.                    cts_icc.tcl        icc_output.txt       signoff_icc.tcl
..                   extract_icc.tcl    init_design_icc.tcl  test.tcl
.place_icc.tcl.swp   filenames.log      place_icc.tcl
chip_finish_icc.tcl  floorplan_icc.tcl  route_icc.tcl
command.log          fpu.mw             run.tcl
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> clear
Error: unknown command 'clear' (CMD-005)
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man get_scan_chains
2.  Synopsys Commands                                        Command Reference
                                get_scan_chains

NAME
       get_scan_chains
              Returns the number of scan chains in the current design.

SYNTAX
       status get_scan_chains

ARGUMENTS
       The get_scan_chains command has no arguments.

DESCRIPTION
       This command returns the number of scan chains in the current design.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       This example shows how to get the number of scan chains in the design:

         prompt> get_scan_chains

SEE ALSO
       get_scan_cells_of_chain(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> get_scan_chains
Error: Current design is not defined. (UID-4)
0
icc_shell> man place_opt
2.  Synopsys Commands                                        Command Reference
                                   place_opt

NAME
       place_opt
              Performs  simultaneous  placement,  routing, and optimization on
              the design.

SYNTAX
       status place_opt
               [-effort low | medium | high]
               [-area_recovery]
               [-optimize_dft]
               [-congestion]
               [-power]
               [-cts]
               [-spg]
               [-skip_initial_placement]
               [-consider_scan]
               [-continue_on_missing_scandef]
               [-optimize_icgs]

ARGUMENTS
       -effort low | medium | high
              Specifies the effort level for place_opt.

              The default effort level is medium.

              If you specify high, the place_opt command spends more  time  to
              further improve the quality of results (QoR).

              If  you  specify  low, the place_opt command spends less time on
              improving the QoR.

       -area_recovery
              Enables area recovery for the cells not on the  timing  critical
              paths.

              By default, area recovery is not performed.

       -optimize_dft
              Enables  scan  chain  reordering, which performs placement-aware
              scan reordering. It aims to reduce the scan chain  wire  length,
              minimize congestion, and improve routability.

              When  you  specify  this  option, you must load the SCANDEF data
              that defines the scan chains before running the  place_opt  com-
              mand.   You  can use the get_scan_chains command to check if the
              SCANDEF data is available.

       -congestion
              Enables congestion removal algorithms for improved  routability.

              By default, congestion removal is not performed.

       -power
              Enables  power-aware timing optimization and leakage-power opti-
              mization during the place_opt command.

              The place_opt command  can  perform  leakage-power  optimization
              based on either the multiple-threshold-voltage constraint or the
              leakage values of the library cells.  To  perform  leakage-power
              optimization based on the multiple-threshold-voltage constraint,
              use the set_multi_vth_constraint command  to  define  this  con-
              straint  before  running  the  place_opt  command.  If this con-
              straint is not defined, the tool bases the  leakage-power  opti-
              mization on the leakage values of the library cells.

              When you specify this option for a multicorner-multimode design,
              you must use the  set_scenario_options  command  to  select  the
              leakage scenarios before running the place_opt command.

              By default, neither power-aware timing optimization nor leakage-
              power optimization is performed. To perform  power-aware  timing
              optimization without leakage-power optimization, do not use this
              option, but set the icc_preroute_power_aware_optimization  vari-
              able to true.

       -cts
              Enables  clock  tree synthesis, optimization, and routing within
              the place_opt command. It also enables the  optimization  engine
              to work with propagated clock network delays.

              When you specify this option, you must specify all clock-related
              constraints before running the place_opt command.

       -spg
              Enables the use of Synopsys physical guidance  information  from
              the  Design  Compiler  tool. The compile_ultra command in Design
              Compiler needs to run  with  the  same  option.  With  the  -spg
              option,  the  place_opt  uses  the physical guidance information
              from Design Compiler to guide optimization.

              This option cannot  be  used  with  the  -skip_initial_placement
              option.

       -skip_initial_placement
              Skips  the  initial placement stage that is invoked first during
              the place_opt flow.

              When you specify this option, you must ensure that  the  initial
              placement  has  been  performed;  that  is, all cells have valid
              locations and macro cells are fixed.  Otherwise,  the  place_opt
              command exits with an error.

              You  also  need  to  ensure  that high fanout synthesis has been
              done. With this option, only incremental high  fanout  synthesis
              is performed during the place_opt flow.

              This option cannot be used with the -spg option.

       -consider_scan
              Considers  the  scan  chain  connections  during placement.  You
              should not specify this option when performing the DFT optimiza-
              tion flow because scan nets affect placement.

              By default, the command ignores scan nets and disables DFT opti-
              mization.

       -continue_on_missing_scandef
              Continues placement when the design contains scan chains but  no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an error message. If you specify this option, the  command  con-
              tinues with a warning and results in reduced QoR.

              Setting  this option enables the placer to continue and consider
              the scan chains regardless of the setting of the  -consider_scan
              option.

       -optimize_icgs

              Enables additional optimization for clock gates and clock enable
              paths during place_opt command.

              You  should  consider  using   this  option  when  clock  gating
              enable paths are critical bottle necks for timing closer in your
              design.

              Prior to using place_opt with -optimize_icgs  option,  you  must
              load  all the clock tree synthesis options and settings, includ-
              ing the clock tree synthesis scenarios, to ensure  correct  syn-
              thesis of the clocks in the design.  When  this option is speci-
              fied, the place_opt command performs restructuring of the  clock
              gating  logic and the clock gating latencies are considered dur-
              ing the place_opt flow.  Estimated clock gating skew margin val-
              ues  are  applied  to  clock  enable  paths,  viewable in timing
              reports.

DESCRIPTION
       This command performs simultaneous placement, routing, and optimization
       on  the  current design. The output of this command is a legally placed
       netlist. If you specify the -cts option, the  output  also  includes  a
       fully synthesized, optimized, routed, and extracted clock network.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.  If you enable
       power optimization, you must select the leakage scenarios  before  run-
       ning the place_opt command.

EXAMPLES
       The following example runs the place_opt command in timing-driven mode.

         prompt> place_opt

SEE ALSO
       clock_opt(2)
       create_buffer_tree(2)
       create_placement(2)
       extract_rc(2)
       identify_clock_gating(2)
       legalize_placement(2)
       psynopt(2)
       route_opt(2)
       set_place_opt_cts_strategy(2)
       create_net_search_pattern(2)
       set_net_search_pattern_delay_estimation_options(2)
       set_multi_vth_constraint(2)
       set_scenario_options(2)
       icc_preroute_power_aware_optimization(3)
       set_place_opt_strategy(2)
       report_place_opt_strategy(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> man preroute_standard_cells
2.  Synopsys Commands                                        Command Reference
                            preroute_standard_cells

NAME
       preroute_standard_cells
              Connects  standard  cell  power and ground pins to the power and
              ground rings and straps. Connects power and ground rails in  the
              standard cells.

SYNTAX
       status preroute_standard_cells
               [-mode rail | tie | net]
               [-connect horizontal | vertical | both]
               [-nets collection_of_nets]
               [-route_pins_on_layer layer]
               [-within rectangle]
               [-no_routing_outside_working_area]
               [-ignore_cell_boundary]
               [-within_voltage_areas collection_of_voltage_areas]
               [-exclude_voltage_areas collection_of_voltage_areas]
               [-special_via_rule]
               [-offset_both_sides_for_special_via]
               [-special_via_x_offset distance]
               [-special_via_y_offset distance]
               [-special_via_x_size distance]
               [-special_via_y_size distance]
               [-special_via_x_step distance]
               [-special_via_y_step distance]
               [-start_share_via_stack layer]
               [-advanced_via_rules]
               [-skip_macro_pins]
               [-skip_pad_pins]
               [-remove_floating_pieces]
               [-pin_width_by_extreme_edges]
               [-pin_width_by_most_extended_pin]
               [-tie_mode_max_route_width distance]
               [-extend_to_boundaries_and_generate_pins]
               [-force_extend_to_boundaries_and_generate_pins]
               [-no_via_to_boundary_pin]
               [-avoid_merging_vias]
               [-optimize_via_locations]
               [-snap_shapes_to_tracks]
               [-do_not_route_over_macros]
               [-fill_empty_rows]
               [-fill_empty_sites]
               [-cut_out_empty_spans]
               [-extend_for_multiple_connections]
               [-extension_gap distance]
               [-max_fanout int_number]
               [-h_layer layer]
               [-v_layer layer]
               [-h_width distance]
               [-v_width distance]
               [-route_type P/G Std. Cell Pin Conn | Signal Route | User Enter]
               [-port_filter pattern]
               [-cell_master_filter pattern]
               [-cell_instance_filter pattern]
               [-voltage_area_filter pattern]
               [-port_filter_mode off | select | skip | select_PG_type]
               [-cell_master_filter_mode off | select | skip]
               [-cell_instance_filter_mode off | select | skip]
               [-voltage_area_filter_mode off | select | skip]
               [-undo]

   Data Types
       collection_of_nets              collection
       layer                           string
       rectangle                       list of points
       collection_of_voltage_areas     collection
       distance                        float (in technology file units)
       int_number                      integer
       pattern                         string

ARGUMENTS
       -mode rail | tie | net
              Specifies one of three modes for standard cell connections:
              o rail (the default)
                Connects standard cells by rails.

              o tie
                Connects  standard cells by tying all power and ground pins to
                nearby targets.

              o net
                Connects the pins of standard cells to a nearby power ring  or
                strap by creating a Steiner tree with restrictions. For infor-
                mation about the restrictions, see the  descriptions  for  the
                -max_fanout,   -h_layer,   -v_layer,  -h_width,  and  -v_width
                options.  Basically, the way you select options for this  mode
                depends  on  design, existing power/ground structure of straps
                and rings, and how you want to connect the  pins  to  ring  or
                strap  targets.   If  you want to connect to vertical targets,
                please use the option -connect horizontal, or -connect  verti-
                cal  for  horizontal  targets.   The  tool then creates common
                wires (we call them trunks) in specified direction,  to  which
                pins are connected in clusters limited by the -max_fanout set-
                ting. The trunks are created on layers, specified in  -h_layer
                for  horizontal,  -v_layer  for vertical trunks, or the system
                automatically sets the layers  based  on  layer  direction  if
                default  is  used. The trunk wires then connect to the closest
                target in the opposite direction.

       -connect horizontal | vertical | both
              Specifies the direction of the power and ground connections.

              The default is horizontal.

       -nets collection_of_nets
              Specifies the nets used to connect standard cells.

              By default, power and ground nets are used.

       -route_pins_on_layer layer
              Connects pins only on the specified metal layer. You can specify
              the  value  either as the layerNumber or the layer name from the
              technology file.

              By default, all pins on all layers are connected.

       -within rectangle
              Specifies the area within which to  connect  pins.  Specify  the
              rectangle by using the following format:
                 {{llx lly} {urx ury}}

              By default, the top cell bounding box is used.

       -no_routing_outside_working_area
              Prevents  standard  cell  connections  from extending beyond the
              specified working  area.  By  default,  connections  can  extend
              beyond the area specified by the -within option.

       -ignore_cell_boundary
              By  default,  rails  are trimmed by the circumference of the die
              area for the design. Setting this option will allow rails not to
              be trimmed and overlap or extend beyond the die area.

       -within_voltage_areas collection_of_voltage_areas
              Specifies  the  voltage  areas  within which to connect standard
              cell pins to power rails. All voltage area constraints are  fol-
              lowed  when  the list of voltage areas is specified. If nets are
              not specified by using the -nets option, the  tool  selects  the
              primary  power and ground nets assigned to each voltage area and
              uses them to create power rails.

              When power rails are created within voltage area boundaries, the
              boundaries  are treated as route guides; power rails are created
              completely within the voltage area. When rails are connected  to
              targets,  the  tool  selects  only targets within each specified
              voltage area. Routing outside of the specified voltage areas  is
              not  performed.  The only exception is aligned rails on the same
              net which might be outside of the specified voltage areas.  Such
              case usually applies to ground nets that are shared between dif-
              ferent voltage areas. Otherwise, rails stop at the layer's maxi-
              mum  spacing from the voltage area boundary to avoid design rule
              violations with objects within voltage area.

              By default, rails are created in all voltage areas. Voltage area
              boundaries can be crossed to connect rails to targets, which are
              located in adjacent voltage areas.

              Note that selecting the  -within_voltage_areas  option  disables
              the  use of the following net mode related options: -max_fanout,
              -h_layer, -v_layer, -h_width, -v_width.

              This option is valid only when using rail mode.

       -exclude_voltage_areas collection_of_voltage_areas
              Prevents connection of standard cell pins to  rails  within  the
              specified voltage areas.

              The  -within_voltage_areas  restrictions  are  also honored when
              specifying the -exclude_voltage_areas option.

              By default, rails are created in all voltage areas.

              This option is valid only when using rail mode.

       -special_via_rule
              Creates a matrix of small vias  at  wire  intersections,  rather
              than  one  large via. Using smaller vias might free some routing
              space. You must specify the x- and y-offsets, size, and step  by
              using      the     -offset_both_sides_for_special_via,     -spe-
              cial_via_x_offset,  -special_via_y_offset,  -special_via_x_size,
              -special_via_y_size,      -special_via_x_step,     and     -spe-
              cial_via_y_step options. By default, the tool places  one  large
              via at wire intersections.

       -offset_both_sides_for_special_via
              Applies  the  x- and y-offsets to both the lower-left and upper-
              right corners of the wire intersection area.

              By default, the tool applies offsets only to the lower-left cor-
              ner of the wire intersection area.

       -special_via_x_offset distance

       -special_via_y_offset distance
              Specifies  the x- and y-offset in technology file units from the
              lower-left corner of the wire intersection area where  you  want
              to create the first special via.

              The default is 0.0.

       -special_via_x_size distance

       -special_via_y_size distance
              Specifies  the  x- and y-dimensions of the special vias. Specify
              the dimensions in technology file units.

       -special_via_x_step distance

       -special_via_y_step distance
              Specifies the x- and y-distance between the  special  vias.  The
              distance  is  between two left sides of adjacent via cuts in the
              x-direction and between two bottom sides of adjacent via cuts in
              the  y-direction.  Vias  that create a design rule violation are
              not created. The distance is in technology file units.

       -start_share_via_stack layer
              Shares the upper vias of two neighboring via stacks if they pro-
              duce  DRC violations. Vias located on layers above the specified
              metal layer should be common to both stacks. You can specify the
              value either as the layerNumber or the layer name from the tech-
              nology file.

              By default, no shared vias are allowed.

              This option is valid only when using rail mode.

       -advanced_via_rules
              Uses advanced via rules that have been previously set  by  using
              the set_preroute_advanced_via_rule command.

       -skip_macro_pins
              Avoids connecting standard cells to macro pins.

       -skip_pad_pins
              Avoids connecting standard cells to pad pins.

       -remove_floating_pieces
              Removes floating, unconnected rail segments.

              By default, floating rail segments are kept.

       -pin_width_by_extreme_edges
              Determines  pin  widths  by  the width of the pin at its extreme
              edges.

       -pin_width_by_most_extended_pin
              Determines pin widths by the width of the most extended pin.

       -tie_mode_max_route_width distance
              Specifies the maximum routing width in technology file units for
              tie  mode.  By  default,  the  distance  is 0.0 and the width is
              unlimited.

       -extend_to_boundaries_and_generate_pins
              Extends the power and ground rail to the cell boundary and  gen-
              erates a power and ground pin for the extension, if the top cell
              does not have pads. The pin is marked as  fixed  to  prevent  it
              from  being moved by placement and routing operations. To extend
              wires, the following conditions must be met:
                a) The power and ground pin is not already connected to  power
                   and  ground  in  the  direction  where  the  preroute_stan-
                   dard_cells command would create the extension wire.

                b) The power and ground extension wire does not cause a design
                   rule violation.

       -force_extend_to_boundaries_and_generate_pins
              Extends  the power and ground rail to the cell boundary and gen-
              erates a power and ground pin for the  extension,  even  if  the
              power and ground pin is already connected to power and ground.

       -no_via_to_boundary_pin
              Do  not drop via from rail to boundary pin. By default, boundary
              pins are considered as targets for rail via connection.

       -avoid_merging_vias
              Prevents the merging of existing vias.

       -optimize_via_locations
              Adjusts the vias by small distances horizontally  or  vertically
              so that more tracks are saved for detail routing.

       -snap_shapes_to_tracks
              Attempts  to  place  newly created shapes onto the tracks of the
              appropriate metal layers.

              If a connection cannot be placed onto  the  track,  the  command
              leaves the pins unconnected.

              This option is valid only when using net mode.

       -do_not_route_over_macros
              Prevents  the  prerouter  from generating wires over macro cells
              and removes the parts of a  route  that  go  over  a  macro.  By
              default, this option is off.

       -fill_empty_rows
              Fills  all rows, even those without cells, with power and ground
              rails.

       -fill_empty_sites
              Fills all rows that contain least one placed cell with power and
              ground rails. This option will not fill a row that is completely
              empty.

       -cut_out_empty_spans
              Prevents creation of rails between neighboring power  straps  or
              rings  of  the net if no standard cell pins of the net are found
              in that area.

       -extend_for_multiple_connections
              Extends the low and high ends of the standard  cell  connections
              to  reach  more targets on the same net. The extension continues
              until either there are no more targets in the respective  direc-
              tions,  or  the next target exceeds the spacing threshold set in
              the -extension_gap option. This option is off by default.

       -extension_gap distance
              Specifies the space threshold in technology file units for  mul-
              tiple  connections.  Adjacent targets closer than this value are
              connected together.

       -max_fanout int_number
              Specifies the maximum number of pins in a tree  connecting  them
              to a ring or strap when using net mode. The default is 10.

       -h_layer layer
              Specifies  the  routing layer to be used for horizontal segments
              when using net mode. If the layer is not set or is not a routing
              layer, the command sets the layer automatically.

       -v_layer layer
              Specifies  the  routing  layer  to be used for vertical segments
              when using net mode. If the layer is not set or is not a routing
              layer, the command sets the layer automatically.

       -h_width distance
              Specifies  the width in technology file units of horizontal seg-
              ments when using net mode. If the width does not  correspond  to
              the  maximum or minimum width of the layer, it is adjusted auto-
              matically. By default, or if the width is 0.0, the command  uses
              the width of the thinnest pin in a set.

       -v_width distance
              Specifies  the  width  in technology file units of vertical seg-
              ments when using net mode. If the width does not  correspond  to
              the  maximum or minimum width of the layer, it is adjusted auto-
              matically. By default, or if the width is 0.0, the command  uses
              the width of the thinnest pin in a set.

       -route_type P/G Std. Cell Pin Conn | Signal Route | User Enter
              Specifies  the  route_type  attribute  to be assigned to all new
              shapes and vias created by the command when using net mode. This
              option is ignored in all other modes.

              By default, the route type is "P/G Std. Cell Pin Conn".

       -port_filter pattern
              Specifies  a  list of matching patterns for pin names; pin names
              that match the pattern are routed. Each pattern  can  contain  a
              regular  expression.  Patterns  must be separated by commas. The
              default is *.

       -cell_master_filter pattern
              Specifies a list of matching patterns for reference cell  names;
              reference  cell  names  that  match the pattern are routed. Each
              pattern can contain a regular expression. Patterns must be sepa-
              rated by commas. The default is *.

       -cell_instance_filter pattern
              Specifies a list of matching patterns for cell names; cell names
              that match the pattern are routed. Each pattern  can  contain  a
              regular  expression.  Patterns  must  be  separated  by  commas.
              Default is *.

       -voltage_area_filter pattern
              Specifies a list of matching patterns for voltage  areas;  stan-
              dard  cells  within  voltage  areas  that  match the pattern are
              routed. Each pattern can contain a regular expression.  Patterns
              must be separated by commas. The default is *.

       -port_filter_mode off | select | skip | select_PG_type
              Specifies one of four modes for the port filter:
              o off (the default)
                Ignores the filter.

              o select
                Selects  a pin for routing if its name corresponds to at least
                one pattern of the filter.

              o skip
                Excludes a pin from routing if  its  name  corresponds  to  at
                least one pattern of the filter.

              o select_PG_type
                Selects  a pin for routing if its name corresponds to at least
                one pattern of the filter and if it is a power or ground  type
                pin.   Selecting  this  option  processes only power or ground
                type pins, which might result in significant speed improvement
                of the command. If the name pattern is not specified, all pins
                of power or ground type are processed.

       -cell_master_filter_mode off | select | skip
              Specifies one of three modes for the cell master filter:
              o off (the default)
                Ignores the filter.

              o select
                Selects pins of a cell for routing if the name of  its  refer-
                ence corresponds to at least one pattern of the filter.

              o skip
                Excludes pins of a cell from routing if the name of its refer-
                ence corresponds to at least one pattern of the filter.

       -cell_instance_filter_mode off | select | skip
              Specifies one of three modes for the cell instance filter:
              o off (the default)
                Ignores the filter.

              o select
                Selects pins of a cell for routing if its name corresponds  to
                at least one pattern of the filter.

              o skip
                Excludes  pins  of a cell from routing if its name corresponds
                to at least one pattern of the filter.

       -voltage_area_filter_mode off | select | skip
              Specifies one of three modes for the voltage area filter:
              o off (the default)
                Ignores the filter.

              o select
                Selects pins of a cell for routing if the name of the  voltage
                area  in  which the cell is placed corresponds to at least one
                pattern of the filter.

              o skip
                Excludes pins of a cell from routing if the name of the  volt-
                age  area  in which the cell is placed corresponds to at least
                one pattern of the filter.

       -undo  Removes the connections created by the  last  run  of  the  pre-
              route_standard_cells command.

DESCRIPTION
       The  preroute_standard_cells command connects the power and ground pins
       in the standard cells to the power and ground rings or straps and  con-
       nects power and ground rails in the standard cells.

       You  can  change  the  internal  application  of DRC rules by using the
       set_preroute_drc_strategy command.

   Prerequisites
       Before you run this command, you must use the derive_pg_connection com-
       mand  to  specify the port-to-net connections for power and ground nets
       that are not in the netlist.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following example preroutes standard cells in both direction  using
       rail  mode  (the  default mode) using the VDD and VSS nets. The command
       connects only pins on the metal 3 layer, within the region {10.0  10.0}
       {1400.0 1400.0}.

         prompt> preroute_standard_cells\
         -nets {VDD VSS} -connect both\
         -route_pins_on_layer M3\
         -within {{10.0 10.0} {1400.0 1400.0}}

       The  following  example  preroutes  standard  cells  using rail mode by
       default, within voltage areas va1, va2 and va3. The tool connects  pri-
       mary  power  and ground nets that are assigned to the voltage areas and
       fills all empty and occupied rows. Power and ground wires are  extended
       to  the  cell boundary and a power and ground pin are generated for the
       extension wire if the top cell does not have pads.

         prompt> preroute_standard_cells \
         -fill_empty_rows -extend_to_boundaries_and_generate_pins \
         -within_voltage_areas {va1 va2 va3}

       The following example creates rails everywhere  except  within  voltage
       areas va1, va2 and va3:

         prompt> preroute_standard_cells \
         -fill_empty_rows -extend_to_boundaries_and_generate_pins \
         -exclude_voltage_areas {va1 va2 va3}

SEE ALSO
       set_preroute_advanced_via_rule(2)
       set_preroute_drc_strategy(2)
       report_preroute_drc_strategy(2)
       derive_pg_connection(2)
       create_rectangular_rings(2)
       create_preroute_vias(2)
       create_pad_rings(2)
       preroute_instances(2)
       create_power_straps(2)
       verify_pg_nets(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man derive_pg_connection
2.  Synopsys Commands                                        Command Reference
                             derive_pg_connection

NAME
       derive_pg_connection
              Connects  power, ground, and tie-off pins to the specified power
              and ground nets. The command supports both a manual mode and  an
              automatic mode. In manual mode, you specify the power and ground
              nets. In automatic mode, the tool derives the power  and  ground
              nets  from  the power domain connections. Automatic mode is sup-
              ported only for multivoltage designs with UPF  descriptions  and
              requires logic libraries with power and ground pins.

SYNTAX for Automatic Mode
       status derive_pg_connection
               [-create_nets]
               [-all | -tie]
               [-tie]
               [-resolve_conflict]
               [-reconnect [-preserve_physical_only_pg]]
               [-verbose]

SYNTAX for Manual Mode
       status derive_pg_connection
               [-cells cells]
               [-create_ports none | top | all]
               [-ground_net net_name]
               [-ground_pin pin_name]
               [-power_net net_name]
               [-power_pin pin_name]
               [-reconnect [-preserve_physical_only_pg]]
               [-tie]

   Data Types
       cells        collection
       net_name     string
       pin_name     string

ARGUMENTS
       -create_nets
              Creates  power and ground nets based on the power domain defini-
              tions and supply nets. Loading a UPF file into a design does not
              create  power and ground nets; loading the file only applies the
              power supply network intent to the design. The derive_pg_connec-
              tion  -create_nets  command  creates  logical supply nets in the
              design according to the supply nets defined in the UPF file.  If
              multiple  supply  nets connect through supply ports, the command
              creates only one power net with the name  following  the  supply
              net inside the highest logic hierarchy.

              This option is valid only in automatic mode.

       -all   Connect both power and ground pins and tie-off pins.

              The  -all option is mutually exclusive with the -tie option; you
              can specify only one. If you do not specify either  option,  the
              derive_pg_connection  command connects only the power and ground
              pins.

              This option is valid only in automatic mode and has no effect on
              tie-off  connections. The command ignores the -all option if you
              specify either the -power_net option or the -ground_net  option.

       -tie   Connects  the  tie-high  and  tie-low pins. The power and ground
              network must exist prior to connecting the tie-high and  tie-low
              pins.

              In  manual mode, the tool connects the tie-off pins to the power
              and ground nets specified  in  the  -power_net  and  -ground_net
              options, respectively.

              In  automatic  mode,  the  tool connects the tie-off pins to the
              proper power nets based on the power connections of  their  cell
              instances.  A tie-high pin follows the connection of its related
              power pin if the related_power_pin attribute is defined  on  the
              pin  in  the  library cell. If the attribute is not defined, the
              tie-high pin of a regular cell connects to the primary power net
              of  the cell's power domain and the tie-high pin of an always-on
              cell connects to the backup power net.

              The -tie option is mutually exclusive with the -all option;  you
              can  specify  only one. If you do not specify either option, the
              derive_pg_connection command connects only the power and  ground
              pins.

       -resolve_conflict
              Corrects  power and ground netlist conflicts with the UPF speci-
              fication, as reported during the net creation step, and modifies
              the power and ground netlist to be compliant with the UPF speci-
              fication. The conflicts include:

              o A signal net that is named as a supply net and has no  driver.

                The  derive_pg_connection  -resolve_conflict  command  changes
                this type of net to a power or ground net.

              o A power or ground net that has  no  corresponding  supply  net
                listing in the UPF specification.

              o A leaf or hierarchical pin that connects to the wrong power or
                ground net, according to the UPF specification.

              Resolve the conflicts by using  this  option  and  other  manual
              editing  commands such as remove_pg_network and recover_tie_con-
              nection.

              This option is valid only in automatic mode. This option  cannot
              be used with any other options.

       -reconnect
              Reconnects  the  power  and ground connections. When you specify
              this option, the command works on all power and ground  pins  of
              the design, whether or not they have existing connections.

              When  you specify both the -reconnect and -all options, the com-
              mand connects the unconnected power and ground pins,  reconnects
              the  previously connected power and ground pins to the power and
              ground network based on the UPF specification, and connects  the
              unconnected  tie-high  and  tie-low  pins.  It does not make any
              changes to existing tie-off connections.

              The -reconnect  option  is  mutually  exclusive  with  the  -tie
              option; you can specify only one of these options.

       -preserve_physical_only_pg
              Preserves the existing power and ground connections of physical-
              only cells.

              When you specify this option, the command reconnects only uncon-
              nected power and ground pins of physical-only cells.

              This option can be used only with the -reconnect option.

       -verbose
              Prints  the  details  of  the changes to the power and ground or
              tie-off connections.

       -cells cells
              Specifies the cells to connect to  the  power  and  ground  nets
              specified  by  the  -power_net  and -ground_net options, respec-
              tively.

              This option is valid only in manual mode.

       -create_ports none | top | all
              Creates ports for the  nets  specified  by  the  -power_net  and
              -ground_net options.

              If  you  do  not specify this option in manual mode, the command
              does not create any ports at the top level or  on  child  cells.
              The -create_ports option supports the following keywords:

              o none (the default)

                The command does not create any ports.

              o top

                The command creates only top-level ports.

              o all

                The  command creates top-level and child-cell ports as needed.

              This option is valid only in manual mode.

       -ground_net net_name
              Specifies the name of the ground net to use for ground and  tie-
              low  connections.  Using  this option invokes the tool in manual
              mode.

              This option is valid only in manual mode.

       -ground_pin pin_name
              Specifies the name of the ground pin on the cells  specified  in
              the  -cells  option  to  connect  to  the  net  specified in the
              -ground_net option.

              This option is valid only in manual mode.

       -power_net net_name
              Specifies the name of the power net to use for  power  and  tie-
              high  connections.  Using this option invokes the tool in manual
              mode.

              This option is valid only in manual mode.

       -power_pin pin_name
              Specifies the name of the power pin on the  cells  specified  in
              the  -cells  option  to  connect  to  the  net  specified in the
              -power_net option.

              This option is valid only in manual mode.

DESCRIPTION
       This command creates the power and ground network for  your  design  by
       connecting  the power, ground, and tie-off pins to the power and ground
       nets in your design.

       The command supports two modes: manual mode and automatic mode.
       o In automatic mode, the tool derives the power and  ground  nets  from
         the power domain connections.

         At a minimum, each power domain has a primary power net and a primary
         ground net. A power domain might also have backup  power  and  ground
         nets.   You can use automatic mode only for UPF multivoltage designs.
         In addition, automatic mode requires logic libraries with  power  and
         ground  pins.  In  automatic  mode, the tool can create the power and
         ground nets if they do not already exist.

         Note that this command does not support  PG  port  punching  on  leaf
         cells, including macros.

       o In manual mode, use the -power_net and -ground_net options to specify
         the power and ground nets.  Using  at  least  one  of  these  options
         invokes  the tool in manual mode. You can use manual mode for single-
         voltage or multivoltage designs.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following example uses the derive_pg_connection  command  in  auto-
       matic  mode  to  connect all unconnected power and ground pins based on
       the power domain connections.

         prompt> derive_pg_connection

         Power/Ground Connection Summary:

         P/G net name                P/G pin count(previous/current)
         -----------------------------------------------------------
         Power net "VDD":                  0/2547
         Power net "VDDM":                 0/4798
         Power net "VDDI":                 200/250
         Unconnected power pins:           7395/0

         Ground net "VSS":                 6368/7368
         Unconnected ground pins:          1000/0
         -----------------------------------------------------------
         Information: connections of 8395 power/ground pin(s) are created or changed.

       The following example uses derive_pg_connection in manual mode to  con-
       nect  all  unconnected power pins to VDD and to connect all unconnected
       ground pins to VSS.

         prompt> derive_pg_connection -power_net VDD -ground_net VSS

         P/G net name                P/G pin count(previous/current)
         -----------------------------------------------------------
         Power net "VDD":                  0/2547
         Power net "VDDM":                 0/4798
         Power net "VDDI":                 200/250
         Unconnected power pins:           7395/0

         Ground net "VSS":                 6368/7368
         Unconnected ground pins:          1000/0
         -----------------------------------------------------------
         Information: connections of 8395 power/ground pin(s) are created or changed.

       The following example uses the derive_pg_connection command  in  manual
       mode  to connect the unconnected power pin vdd_io on cell I_PAD1 to the
       power network VDD_IO. The command also connects the  unconnected  power
       pin vdd_core on the same cell to the power network VDD_CORE.

         prompt> derive_pg_connection -power_net VDD_IO -power_pin vdd_io \
            -cells I_PAD1
         prompt> derive_pg_connection -power_net VDD_CORE -power_pin vdd_core \
            -cells I_PAD1

       Note  that  if  the  vdd_io  and vdd_core pins are already connected to
       another power network, you  must  add  the  -reconnect  option  to  the
       derive_pg_connection command.

SEE ALSO
       check_mv_design(2)
       connect_supply_net(2)
       create_power_domain(2)
       create_supply_net(2)
       create_supply_port(2)
       recover_tie_connection(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man create_buffer_tree
2.  Synopsys Commands                                        Command Reference
                              create_buffer_tree

NAME
       create_buffer_tree
              Creates a buffer tree for the specified driver pins and nets.

SYNTAX
       status create_buffer_tree
               [-from pin_net_list]
               [-incremental]
               [-no_legalize]
               [-on_route [-skip_detail_route]]
               [-align_hierarchy_for_long_nets]

   Data Types
       pin_net_list     collection

ARGUMENTS
       -from pin_net_list
              Specifies  the  driver  pins and nets for which the tool creates
              buffer trees.  When the -from option is not specified, the  cre-
              ate_buffer_tree  command  works on all drivers with a transitive
              fanout of 5 or more.  The -from option  can  be  used  with  the
              -on_route  option.  If  they  are  used  together,  the nets are
              required to be routed. The create_buffer_tree command runs  post
              route  based  optimization  only  when  the  -on_route and -from
              options are used together.  You have to run  subsequent  routing
              to  make sure that all nets are fully routed for the next opera-
              tion.

       -incremental
              Sets the scope of creating the buffer  tree  for  the  specified
              nets  rather than the entire buffer tree driven by the specified
              nets.  When this option  is  specified,  the  create_buffer_tree
              command  constructs a buffer tree, if needed, on each net speci-
              fied by the -from option to reduce the high fanout of each  net,
              but  it  does  not remove any existing buffers or inverters. So,
              the scope of creating buffer trees is a single specified net.

       -no_legalize
              Disables placement legalization at the end of buffering.

       -on_route
              Perform the postroute optimization flow, where it fixes DRC vio-
              lations  by  using  the route_opt command and then the focal_opt
              command. It focuses mainly on fixing maximum net length, so  you
              need  to  specify  the  max_net_length  constraint  by using the
              set_max_net_length  command,  before  using  this  option.   The
              final database is a detail routed database.

              It  is  recommended  to  use  the -align_hierarchy_for_long_nets
              option with the -on_route option  to  ensure  that  optimization
              occurs for long nets crossing logical hierarchies.

              You  can use the -from option with this option to fix DRC viola-
              tions for the concentrated nets. However, if you use  the  -from
              option,  the design must be detail routed and you cannot use the
              -skip_detail_route or -align_hierarchy_for_long_nets options.

       -skip_detail_route
              Skips detail routing when used with  the  -on_route  option.  By
              default  the -on_route option triggers full detail routing after
              topology-based DRC optimization.  This option can reduce runtime
              of the on_route option by skipping the final detail route.

              This  option  can  only be used with the -on_route option.  This
              option cannot be combined with the -from option.

       -align_hierarchy_for_long_nets
              Enables additional optimizations and port punching for long nets
              that  crosses  multiple  hierarchies.   Long nets are those nets
              that violate the maximum net length constraint for  the  design.
              You   can   specify   max_net_length    constraint  via  command
              set_max_net_length before using this option.  If  you  use  this
              option  and the  design  does not have a maximum net length con-
              straint, the command fails with an error message.

              When you use this option, the tool  first  performs  high-fanout
              net fixing and also fixing DRC violations, such as maximum tran-
              sition and capacitance, for low fanout nets.  It  then  performs
              preroute topology-based buffering and port punching for the nets
              that violate the maximum net length constraint and crosses  mul-
              tiple hierarchies. If both of these conditions are not met, this
              additional optimization is not performed.

              This option does not fix all maximum net length constraint.  You
              have to rely on the -on_route option to fix the remaining viola-
              tions.

              This option can be used alone or with the -on_route option,  but
              it cannot be used with the -from options.

DESCRIPTION
       The create_buffer_tree command creates a buffer tree for each specified
       driver pin and for the driver pin of each specified net.

       The create_buffer_tree command generates a  hierarchical  buffer  tree,
       and  buffers  are inserted across hierarchical boundaries.  The command
       is location-based. Therefore, the specified driver pin should not be  a
       hierarchical pin because a hierarchical pin does not have a location.

       Use this command on a placed design only. The command requires the fol-
       lowing libraries and information:

        o The physical  libraries  that  correspond  to  the  specified  logic
         libraries.

        o  The  capacitance  and  resistance  per unit length derived from the
         physical library or user-specified.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.

EXAMPLES
       The following example creates a buffer  tree  that  is  implemented  at
       driver a/O:

         prompt> create_buffer_tree -from [get_pins a/O]

       The following example creates buffer trees for driver a/O and net n1:

         prompt> create_buffer_tree -from {[get_pins a/O] [get_nets n1]}

SEE ALSO
       remove_buffer_tree(2)
       report_buffer_tree(2)
       report_ahfs_options(2)
       report_net_fanout(2)
       set_ahfs_options(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man create_placement
2.  Synopsys Commands                                        Command Reference
                               create_placement

NAME
       create_placement
              Performs coarse placement on the current design.

SYNTAX
       status create_placement
               [-effort low | medium | high]
               [-quick]
               [-timing_driven]
               [-congestion [-congestion_effort low | medium | high]]
               [-check_only]
               [-mpc]
               [-consider_scan]
               [-continue_on_missing_scandef]
               [-optimize_icgs]

ARGUMENTS
       -effort low | medium | high
              Specifies  the  CPU  effort  level  for  coarse  placement.  The
              default effort level is medium.

       -quick Enables fast coarse  placement  suitable  for  floorplan  explo-
              ration.

       -timing_driven
              Enables direct timing-driven placement mode.

       -congestion
              Enables congestion-driven placement mode.

       -congestion_effort low | medium | high
              Specifies  the  effort  level  for congestion mode.  The default
              effort level is medium.  Expect a significant increase  in  run-
              time  for high effort.  This option can only be used in conjunc-
              tion with the -congestion option.

       -check_only
              Checks whether the design and the libraries have all of the nec-
              essary  information  to  run the command.  This option cannot be
              used with other options.

       -mpc   Runs create_placement with minimum physical  constraints.   This
              option  instructs  the command to check for any floorplan in the
              design. If there is no floorplan, it creates a  floorplan  based
              on  the  minimum physical constraints. If you do not specify any
              physical constraints, the tool assumes a set of  default  values
              and creates a default floorplan based on the number of cells and
              the total areas needed.

              The default values are 60% cell density and  1:1  aspect  ratio.
              The  cell  area  information  is  taken  from  the physical cell
              library.  See the set_mpc_options command for details on how  to
              set up physical constraints.

       -consider_scan
              Specifies  to  consider the scan chain connections during place-
              ment.  You should not specify this option  when  performing  the
              DFT optimization flow because scan nets affect placement.

              By default, the command ignores scan nets and disables DFT opti-
              mization.

       -continue_on_missing_scandef
              Specifies to continue placement when the  design  contains  scan
              chains  but  no  SCANDEF  data. By default, missing SCANDEF data
              causes the command to exit with an error message. If you specify
              this option, the command continues with a warning and results in
              reduced QoR.  Setting this option enables the placer to continue
              and  consider  the  scan chains regardless of the setting of the
              -consider_scan option.

       -optimize_icgs
              When the option is specified,  additional  steps  to  merge  and
              restructure  the  clock  gates based on design topology are per-
              formed. You should consider using this option when clock  gating
              enable  paths  are  timing  critical in your design. This option
              will increase runtime.

DESCRIPTION
       The create_placement command performs coarse placement on  the  current
       design.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.

EXAMPLES
       The  following  example  runs  the  create_placement command in timing-
       driven mode:

         prompt> create_placement -effort high -timing_driven

SEE ALSO
       legalize_placement(2)
       psynopt(2)
       read_def(2)
       write_def(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man retract_rc
Error: No manual entry for 'retract_rc' (CMD-025)
icc_shell> man extract_rc
2.  Synopsys Commands                                        Command Reference
                                  extract_rc

NAME
       extract_rc
              Executes 2.5D extraction for routes in a design.

SYNTAX
       status extract_rc
               [-coupling_cap]
               [-estimate]
               [-routed_nets_only]
               [-incremental]

ARGUMENTS
       -coupling_cap
              Specifies  for  the extraction to consider coupling capacitance.
              Specifying this option can cause the Standard Parasitic Exchange
              Format  (SPEF)  file  to  be very large.  By default, extraction
              does not consider coupling capacitance.

       -estimate
              Performs RC estimation for both routed and  unrouted  nets.   By
              default, the extract_rc command performs detailed RC calculation
              for fully routed nets and RC estimation for unrouted nets.   For
              RC  estimation,  the  command performs virtual routing and delay
              calculation and back-annotates the delay and capacitance on  the
              current  design.   After  running  this command, you can use the
              report_timing command to see the estimated timing results.

       -routed_nets_only
              Performs RC extraction of fully routed nets only, and  skips  RC
              estimation  of unrouted routed nets.  By default, the extract_rc
              command performs both RC extraction from fully-routed  nets  and
              RC estimation of unrouted nets.

       -incremental
              Performs incremental RC extraction based on the last extraction.
              It only works with a detailed routed design.  If there  are  too
              many changes since the last extraction (default 10% of nets), it
              performs a full extraction.

DESCRIPTION
       This command performs RC extraction from the routes in memory.  It cal-
       culates delay based on the Elmore delay model.

       If  you use the set_tlu_plus_files command to specify the TLUPlus tech-
       nology files, the tool performs extraction based on TLUPlus technology.

       If  your  physical  library does not contain extraction parameters, the
       tool derives the resistance and capacitance values of routes  from  the
       available  RC  estimation  method  in  your physical library.  The tool
       issues the RCEX-015 information message, which determines the RC  esti-
       mation method that is used.

       To extract coupling capacitance, use the -coupling_cap option.

       To  fine-tune  the  extraction  results, use the set_extraction_options
       command.   This  command  allows  you  to  specify  various  extraction
       options, such as scaling factors for resistance and capacitance values.

   Multicorner-Multimode Support
       For preroute designs, this command uses  information  from  all  active
       scenarios.   For  postroute designs, this command uses information from
       both active and inactive scenarios.

EXAMPLES
       The following example performs virtual routing and  updates  back-anno-
       tated net delays.

         prompt> extract_rc -estimate

       The following example considers coupling capacitance.

         prompt> extract_rc -coupling_cap

SEE ALSO
       read_parasitics(2)
       report_timing(2)
       set_extraction_options(2)
       set_operating_conditions(2)
       set_tlu_plus_files(2)
       write_parasitics(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man identify_clock_gating
2.  Synopsys Commands                                        Command Reference
                             identify_clock_gating

NAME
       identify_clock_gating
              Identifies  Power  Compiler-inserted clock-gating circuitry in a
              structural netlist.

SYNTAX
       status identify_clock_gating
               [-gating_elements cell_collection]
               [-reset]

   Data Types
       cell_collection     collection

ARGUMENTS
       -gating_elements cell_collection
              Marks the specified cell as a gating element.  By default,  this
              option  is  off.   Performs  specific  recognition of the listed
              cells as gating elements.  Each element must meet the  following
              minimum conditions to be accepted as a gating element:
            o Minimum 2 input pins

            o Minimum 1 output pin

            o One of the inputs pins must be connected to a clock source

       -reset Resets  all clock gating attributes.  By default, this option is
              off.

OBSOLETE ARGUMENTS
       The following arguments are no longer  supported  and  are  ignored  if
       used:

       -reset_only cells_or_pins

       -gated_element gated_cells_or_pins

       -ungated_element ungated_cells

DESCRIPTION
       This  command  identifies the Power Compiler-inserted clock-gating cir-
       cuitry in the structural netlist.  Identification refers to the process
       of  detecting  clock gates and the corresponding gated element associa-
       tion  and  setting  different  attributes  on  these  objects.    These
       attributes enable the later steps in the tool to work efficiently.

       There  is  no need to invoke this command if the netlist was in .ddc or
       Milkyway format and the clock-gating structure was not changed  outside
       the tool.

       Set  the correct clock-gating style by using the set_clock_gating_style
       command before invoking the identify_clock_gating command.

       The most common usage is to invoke the  command  without  any  options.
       The  identify_clock_gating  command  searches  all of the clocks in the
       design for clock gates and gated cells.  The tool then marks the clock-
       gating  properties  with  attributes  that are used by subsequent clock
       gating commands.  Because only clocks are traversed in this case, it is
       important  to  run  the  create_clock  command before running the iden-
       tify_clock_gating command in this mode.

       If test control  pins  are  present  on  the  clock  gates,  the  iden-
       tify_clock_gating  command  tries to reinstate the necessary attributes
       for the insert_dft command to work.  The control signal is  assumed  to
       be  of scan_enable type, unless otherwise marked as test_mode, by using
       the set_clock_gating_style command with the  -control_signal  test_mode
       option,   before  running  the  identify_clock_gating  command.   These
       attributes are applied to all the clock gates of the design  that  have
       been identified.

       If  you  specify the -gating_elements option, the command automatically
       detects the gated elements through netlist  traversal.   Each  success-
       fully   identified   element  is  automatically  constrained  with  the
       pwr_cg_preservation_type attribute to prevent  it  from  being  removed
       from  the  design  and from being merged with other gating elements. If
       the specified gating cell has the characteristics of a  type  of  clock
       gate   that   can   be  inserted  by  the  tool,  then  the  value  for
       pwr_cg_preservation_type is preserve. If the gating cell  is  different
       from  one originally inserted by Power Compiler, then the value for the
       attribute is unmodifiable_read_only. After  the  manual  identification
       process  is done, the command also performs the design-scoped identifi-
       cation process to search for additional clock gates, if any.

       The identify_clock_gating command assumes the only nonsequential  cells
       in  the  clock network are single output cells (netlinks, inverters, or
       buffers). If it finds a combinational cell with  multiple  outputs,  it
       stops the traversal, with the exception of pad cells.

       The identify_clock_gating command reports identified elements by print-
       ing two (2) informational messages: PWR-875 and  PWR-877.   The  former
       reports  the  number  of  manually  identified  elements (only if -gat-
       ing_element option is used) for cells that do not have the characteris-
       tics  of  a  type  of clock gate that can be inserted by the tool.  The
       latter reports the number of elements identified by  the  design-scoped
       identification process.

       In  addition, you can use the report_clock_gating command to verify the
       results accuracy of the identification step.  If there  are  any  prob-
       lems, rerun the identify_clock_gating command with the -gating_elements
       option to make repairs.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following example shows  the  typical  flow  for  using  the  iden-
       tify_clock_gating command to identify the clock-gating circuitry:

         prompt> read_verilog mapped_design.v
         prompt> create_clock clk

         prompt> identify_clock_gating
         prompt> report_clock_gating

       The following example shows how to apply clock-gating attributes to the
       user-inserted user_cg1 clock gate as the corresponding  clock  gate  of
       the reg1_reg register bank:

         prompt> read_verilog mapped_design.v

         prompt> identify_clock_gating -gating_elements user_cg1

         prompt> report_clock_gating

       The following example shows how to apply clock-gating attributes to the
       user-inserted user_cg1 clock gate and allow the tool identify the  cor-
       responding registers:

         prompt> read_verilog mapped_design.v

         prompt> identify_clock_gating -gating_elements user_cg1

         prompt> report_clock_gating

       The  following  example shows how to use the identify_clock_gating com-
       mand with the report_clock_gating command to fix problems:

         prompt> read_verilog mapped_design.v

         prompt> create_clock -period 3 clk
         prompt> identify_clock_gating

         # Inspect if all clock gates are identified
         prompt> report_clock_gating -gated

         # Assume cg1 is not identified as a clock gate
         prompt> identify_clock_gating -gating_elements cg1

         prompt> report_clock_gating -gated

SEE ALSO
       create_clock(2)
       report_clock_gating(2)
       placer_gated_register_area_multiplier(3)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man legalize_placement
2.  Synopsys Commands                                        Command Reference
                              legalize_placement

NAME
       legalize_placement
              Executes detailed placement on a design.

SYNTAX
       status legalize_placement
               [-effort low | medium | high]
               [-check_only]
               [-incremental]
               [-cells cell_objects
                  [-priority low | medium | high]
                  [-coordinates
                  [-timing]

   Data Types
       cell_objects     collection
       rectangles       list of points

ARGUMENTS
       -effort low | medium | high
              Specifies  the effort level for detailed placement.  The default
              is medium.

       -check_only
              Checks whether the design and the libraries have all the  neces-
              sary information to run the command.

       -incremental
              Performs  incremental  legalization.  This option is mainly used
              when  most  cells  have  already  been  legalized,  such  as  in
              postroute  optimization.  This option tries to move as few cells
              as possible, but those cells moved might be  moved  farther.  It
              can also minimize the timing-critical cell displacement if it is
              used with the -timing option.

       -cells cell_objects
              Specifies the cells to legalize.

              This option must be used with the -priority option.

       -priority low | medium | high
              Specifies the legalization priority for the cells  specified  by
              the -cells option.

              The behavior for each valid value is
              o low (the default)
                The  specified cells are legalized without moving other exist-
                ing cells.  Note that this is a "soft constraint", which means
                that  the  legalize_placement  command  tries  moving only the
                specified cell instances. However, in some situations the tool
                might  still  move other cells. For example, if the design has
                standard cell spacing rules or it has too many illegal  cells.

              o medium
                The  legalizer moves the specified cells and their surrounding
                cells during legalization. The cell movement  depends  on  the
                cell  weights.   If  you use the -timing option, the cells are
                weighted by the cell size and the worst pin slack. If  you  do
                not use the -timing option, the cells are weighted by the cell
                size.

              o high
                The legalizer snaps the specified cells to their nearest legal
                locations  and  moves  the  other  cells at those locations to
                other legal locations.

              You can use this option only with the -cells option.

       -coordinates {rectangles}
              Specifies the rectilinear region  (multiple  rectangles)  within
              which to legalize the cells specified by the -cells option.  You
              specify the rectilinear region as a list  of  rectangles,  where
              each  rectangle is represented by its lower-left and upper-right
              coordinate in the format {x1 y1 x2 y2 ...}. The coordinate units
              are microns.

              When  you  use  this  option,  the specified region works like a
              fence to prevent cells from being moved out of the region.

              You can use this option only with the -cells option.

       -timing
              Minimizes the movement for cells on the critical paths.

              By default, cells are weighted by cell size  during  incremental
              legalization.   When you use this option, the cells are weighted
              by the worst pin slack, as well as the cell size.

              You can use this option only with  the  -cells  or  -incremental
              option.

DESCRIPTION
       The  legalize_placement  command performs placement legalization on the
       current design after coarse placement has already been performed.

       When you run this command, the design should contain a floorplan with a
       site  array  specified and all cells and blockages in the design should
       have an initial location.

       Note: After running the legalize_placement command, the timing is based
       on  the  Steiner  routes of the design and any previous annotations are
       ignored.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.

EXAMPLES
       The following example runs the legalize_placement command.

         prompt> legalize_placement -effort high

SEE ALSO
       create_placement(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man set_place_opts_strategy
Error: No manual entry for 'set_place_opts_strategy' (CMD-025)
icc_shell> man set_place_opt_cts_strategy
2.  Synopsys Commands                                        Command Reference
                          set_place_opt_cts_strategy

NAME
       set_place_opt_cts_strategy
              Specifies clock-tree-related options for the place_opt -cts com-
              mand.

SYNTAX
       status set_place_opt_cts_strategy
               [-operating_condition   min | max(default) | min_max]
               [-no_clock_route]
               [-inter_clock_balance]
               [-fix_hold]
               [-update_clock_latency]

ARGUMENTS
       -operating_condition  [min | max(default) | min_max]
              Specify operating condition, default is max.

       -no_clock_route
              Don't perform routing of clock nets.

       -inter_clock_balance
              Execute inter-clock delay balancing.

       -fix_hold
              Executes hold time violation fixing during incremental optimiza-
              tion.  This option is off by default.

       -update_clock_latency
              Updates  the  latencies  on real and virtual clock objects after
              clock tree synthesis, clock tree optimization, inter-clock  bal-
              ance  (if  chosen)  and  clock tree detailed routing.  This will
              effectively execute a set_clock_latency under-the-hood  for  the
              clock  objects  and use the insertion delay of the clock tree as
              the latency number. If set_latency_adjustment_options command is
              executed  before  place_opt  -cts,  then  the directives will be
              obeyed. If no directives are given, then only the  latencies  of
              real clock objects will be update. The update mechanism uses the
              insertion delay of the clock tree as the latency number.

DESCRIPTION
       The  set_place_opt_cts_strategy  command  defines  clock  tree  related
       options that will later be used by a subsequently issued place_opt -cts
       command in the same session.  Note that these  options  are  applicable
       only  for  place_opt -cts command.  If -cts option is not used for run-
       ning place_opt, then all of the values specified  during  this  command
       are ignored during that invocation of place_opt.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following command sets up operating condition as minimum for a sub-
       sequent place_opt -cts command. It also sets up place_opt -cts to  exe-
       cute inter-clock delay balancing.

         prompt> set_place_opt_cts_strategy -operating_condition min -inter_clock_balance

SEE ALSO
       place_opt(2)
       clock_opt(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man place_opt
2.  Synopsys Commands                                        Command Reference
                                   place_opt

NAME
       place_opt
              Performs  simultaneous  placement,  routing, and optimization on
              the design.

SYNTAX
       status place_opt
               [-effort low | medium | high]
               [-area_recovery]
               [-optimize_dft]
               [-congestion]
               [-power]
               [-cts]
               [-spg]
               [-skip_initial_placement]
               [-consider_scan]
               [-continue_on_missing_scandef]
               [-optimize_icgs]

ARGUMENTS
       -effort low | medium | high
              Specifies the effort level for place_opt.

              The default effort level is medium.

              If you specify high, the place_opt command spends more  time  to
              further improve the quality of results (QoR).

              If  you  specify  low, the place_opt command spends less time on
              improving the QoR.

       -area_recovery
              Enables area recovery for the cells not on the  timing  critical
              paths.

              By default, area recovery is not performed.

       -optimize_dft
              Enables  scan  chain  reordering, which performs placement-aware
              scan reordering. It aims to reduce the scan chain  wire  length,
              minimize congestion, and improve routability.

              When  you  specify  this  option, you must load the SCANDEF data
              that defines the scan chains before running the  place_opt  com-
              mand.   You  can use the get_scan_chains command to check if the
              SCANDEF data is available.

       -congestion
              Enables congestion removal algorithms for improved  routability.

              By default, congestion removal is not performed.

       -power
              Enables  power-aware timing optimization and leakage-power opti-
              mization during the place_opt command.

              The place_opt command  can  perform  leakage-power  optimization
              based on either the multiple-threshold-voltage constraint or the
              leakage values of the library cells.  To  perform  leakage-power
              optimization based on the multiple-threshold-voltage constraint,
              use the set_multi_vth_constraint command  to  define  this  con-
              straint  before  running  the  place_opt  command.  If this con-
              straint is not defined, the tool bases the  leakage-power  opti-
              mization on the leakage values of the library cells.

              When you specify this option for a multicorner-multimode design,
              you must use the  set_scenario_options  command  to  select  the
              leakage scenarios before running the place_opt command.

              By default, neither power-aware timing optimization nor leakage-
              power optimization is performed. To perform  power-aware  timing
              optimization without leakage-power optimization, do not use this
              option, but set the icc_preroute_power_aware_optimization  vari-
              able to true.

       -cts
              Enables  clock  tree synthesis, optimization, and routing within
              the place_opt command. It also enables the  optimization  engine
              to work with propagated clock network delays.

              When you specify this option, you must specify all clock-related
              constraints before running the place_opt command.

       -spg
              Enables the use of Synopsys physical guidance  information  from
              the  Design  Compiler  tool. The compile_ultra command in Design
              Compiler needs to run  with  the  same  option.  With  the  -spg
              option,  the  place_opt  uses  the physical guidance information
              from Design Compiler to guide optimization.

              This option cannot  be  used  with  the  -skip_initial_placement
              option.

       -skip_initial_placement
              Skips  the  initial placement stage that is invoked first during
              the place_opt flow.

              When you specify this option, you must ensure that  the  initial
              placement  has  been  performed;  that  is, all cells have valid
              locations and macro cells are fixed.  Otherwise,  the  place_opt
              command exits with an error.

              You  also  need  to  ensure  that high fanout synthesis has been
              done. With this option, only incremental high  fanout  synthesis
              is performed during the place_opt flow.

              This option cannot be used with the -spg option.

       -consider_scan
              Considers  the  scan  chain  connections  during placement.  You
              should not specify this option when performing the DFT optimiza-
              tion flow because scan nets affect placement.

              By default, the command ignores scan nets and disables DFT opti-
              mization.

       -continue_on_missing_scandef
              Continues placement when the design contains scan chains but  no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an error message. If you specify this option, the  command  con-
              tinues with a warning and results in reduced QoR.

              Setting  this option enables the placer to continue and consider
              the scan chains regardless of the setting of the  -consider_scan
              option.

       -optimize_icgs

              Enables additional optimization for clock gates and clock enable
              paths during place_opt command.

              You  should  consider  using   this  option  when  clock  gating
              enable paths are critical bottle necks for timing closer in your
              design.

              Prior to using place_opt with -optimize_icgs  option,  you  must
              load  all the clock tree synthesis options and settings, includ-
              ing the clock tree synthesis scenarios, to ensure  correct  syn-
              thesis of the clocks in the design.  When  this option is speci-
              fied, the place_opt command performs restructuring of the  clock
              gating  logic and the clock gating latencies are considered dur-
              ing the place_opt flow.  Estimated clock gating skew margin val-
              ues  are  applied  to  clock  enable  paths,  viewable in timing
              reports.

DESCRIPTION
       This command performs simultaneous placement, routing, and optimization
       on  the  current design. The output of this command is a legally placed
       netlist. If you specify the -cts option, the  output  also  includes  a
       fully synthesized, optimized, routed, and extracted clock network.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.  If you enable
       power optimization, you must select the leakage scenarios  before  run-
       ning the place_opt command.

EXAMPLES
       The following example runs the place_opt command in timing-driven mode.

         prompt> place_opt

SEE ALSO
       clock_opt(2)
       create_buffer_tree(2)
       create_placement(2)
       extract_rc(2)
       identify_clock_gating(2)
       legalize_placement(2)
       psynopt(2)
       route_opt(2)
       set_place_opt_cts_strategy(2)
       create_net_search_pattern(2)
       set_net_search_pattern_delay_estimation_options(2)
       set_multi_vth_constraint(2)
       set_scenario_options(2)
       icc_preroute_power_aware_optimization(3)
       set_place_opt_strategy(2)
       report_place_opt_strategy(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man report_placement_utilization
2.  Synopsys Commands                                        Command Reference
                         report_placement_utilization

NAME
       report_placement_utilization
              Reports  the  placement  utilization  for the entire design or a
              certain region.

SYNTAX
       status report_placement_utilization
               [-non_fixed_only  Boolean]
               [-grid_size Float]
               [-verbose Boolean]
               [-coordinates rect]

ARGUMENTS
       -non_fixed_only Boolean
              Specifies that the sub-region utilization reporting is for  non-
              fixed  standard  cells only. By default, the sub-region's place-
              ment utilization number is reported for nonfixed and fixed stan-
              dard  cells.  If you specify this option, the utilization number
              is for non_fixed standard cell only.

              The two formulas for calculating the nonfixed and fixed standard
              cell utilization and nonfixed standard cell only utilization are
              different:

              a) "non_fixed + fixed" standard cell  utilization:  The  formula
              is:
                 (Non-Fixed_Std_Cell_Area + Fixed_Std_Cell_Area) /
                     (Total_Area -  All_Blockage_Area)

              Here  the  "Total_Area" is the area of the entire chip or a cer-
              tain region if the -coordinates  is  specified.   "All  Blockage
              Area" includes "placement blockage", "hard macros" and "complete
              pnet blockage".

              b) "non-Fixed only" standard cell utilization:

              The formula is:

                 (Non-Fixed_Std_Cell_Area) /
                     (Total_Area - All_Blockage_Area - Fixed_Std_Cell_Area)

       -grid_size Float
              Specifies the grid size of each subregion. In  addition  to  the
              entire  chip or a user-specified region, the command divides the
              given area (either entire chip or a user specified region if you
              specify  the  -coordinates option) into a set of sub-regions and
              reports the corresponding utilization of the subregion  to  pro-
              vide  a better understanding of the evenness of the cell distri-
              bution. The grid_size is the size of each subregion. By default,
icc_shell> 
icc_shell> ls
.                    cts_icc.tcl        icc_output.txt       signoff_icc.tcl
..                   extract_icc.tcl    init_design_icc.tcl  test.tcl
.place_icc.tcl.swp   filenames.log      place_icc.tcl
chip_finish_icc.tcl  floorplan_icc.tcl  route_icc.tcl
command.log          fpu.mw             run.tcl
icc_shell> man report_place_opt_strategy
2.  Synopsys Commands                                        Command Reference
                           report_place_opt_strategy

NAME
       report_place_opt_strategy
              Reports the settings that influence the place_opt command.

SYNTAX
       status report_place_opt_strategy

ARGUMENTS
       The report_place_opt_strategy command has no arguments.

DESCRIPTION
       The  report_place_opt_strategy command reports the settings that influ-
       ence the place_opt command, as set by the  set_place_opt_strategy  com-
       mand.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following example runs the report_place_opt_strategy command:

         prompt> set_place_opt_strategy -layer_optimization TRUE
         prompt> report_place_opt_strategy
         **************************************************
         Report : place_opt_strategy
         Design : CORE
         Version: I-2013.12-ICC
         Date   : Tue Sep 3 12:48:44 2013
         **************************************************
         The strategies for place_opt:
         ---------------------------------------------------
         Layer optimization:          TRUE

SEE ALSO
       place_opt(2)
       set_place_opt_strategy(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man set_preroute_advanced_via_rule
2.  Synopsys Commands                                        Command Reference
                        set_preroute_advanced_via_rule

NAME
       set_preroute_advanced_via_rule
              Sets preroute advanced via rule options.

SYNTAX
       int set_preroute_advanced_via_rule
               [-move_via_to_center]
               [-offset_both_sides]
               [-x_offset_recommended]
               [-y_offset_recommended]
               [-x_offset distance]
               [-y_offset distance]
               [-x_step distance]
               [-y_step distance]
               [-cut_layer layer]
               [-contact_codes {list_of_codes}]
               [-cut_spacings {list_of_xy_spacing_distances}]
               [-size_by_via_area {xdistance ydistance}]
               [-size_by_array_dimensions {columns rows}]
               [-rotation_mode on | required | off]
               [-align_stack true | false]

   Data Types
       distance                         float
       layer                            string
       list_of_codes                    list
       list_of_xy_spacing_distances     list
       xdistance                        float
       ydistance                        float
       columns                          integer
       rows                             integer

ARGUMENTS
       -move_via_to_center
              Moves advanced vias to the center of the intersecting wires. All
              other options related to offsets are ignored  when  you  specify
              the  -move_via_to_center  option.  By  default, the vias are not
              moved to center.

       -offset_both_sides
              Applies the x- and y-offsets to both the lower-left  and  upper-
              right  corner of the intersecting wires. By default, the offsets
              are applied only to the lower-left corner  of  the  intersecting
              wires.

       -x_offset_recommended
              Applies  the x-offset specified by using the -x_offset option if
              possible. If you do not specify this  option,  the  x-offset  is
              forcibly applied.

       -y_offset_recommended
              Applies  the y-offset specified by using the -y_offset option if
              possible. If you do not specify this  option,  the  y-offset  is
              forcibly applied.

       -x_offset distance
              Specifies  the x-offset from the lower-left corner of the inter-
              secting wires for the first advanced via. By default, the offset
              is 0.0.

       -y_offset distance
              Specifies  the y-offset from the lower-left corner of the inter-
              secting wires for the first advanced via. By default, the offset
              is 0.0.

       -x_step distance
              Specifies  the spacing between advanced vias in the x-direction.
              Specify the distance value in user units; this is  the  distance
              between  the  two  left  sides  of adjacent via arrays in the x-
              direction. Some vias might not be  inserted  if  they  create  a
              design  rule  checking  violations.  By default, the distance is
              0.0.

       -y_step distance
              Specifies the spacing between advanced vias in the Y  direction.
              Specify  the  distance value in user units; this is the distance
              between the two bottom sides of adjacent via  arrays  in  the  Y
              direction.  Some  vias  might  not  be inserted if they create a
              design rule checking violations. By  default,  the  distance  is
              0.0.

       -cut_layer layer
              Specifies the via layer name or number from the technology file.
              This option is mutually exclusive with the -contact_code option.
              If you do not specify either the -cut_layer or the -contact_code
              options, the tool applies the remaining command options  to  all
              nonspecified via layers by default.

       -contact_codes {list_of_codes}
              Specifies  the via contact code name, number, or list of contact
              code names or numbers from the technology file. This  option  is
              mutually  exclusive  with  the  -cut_layer option. If you do not
              specify either the -cut_layer or the -contact_code  option,  the
              tool  applies  the remaining command options to all nonspecified
              via layers by default.  Please note that  the  list  of  contact
              codes  should belong to the same via layer. If you choose to use
              a list instead of a single contact code, it may affect the  run-
              time, as PG tool will traverse the list until it finds the first
              contact code without drc violation.

       -cut_spacings {list_of_xy_spacing_distances}
              Overrides setting in tech file for via cut  spacing  inside  via
              arrays.   Different  spacing  can  be set in the x- and y-direc-
              tions. The spacing values cannot be smaller than the  tech  file
              settings  to  ensure  that  via cut distances do not violate DRC
              rules. Each set of x- and y-spacings is applied to list of  con-
              tact  codes specified by the -contact_codes option. You must use
              the -contact_codes option when you use the -cut_spacings option.
              If  the  list of cut spacings is longer than the list of contact
              codes, the cut spacings list is truncated. If the  cut  spacings
              list  is shorter than list of contact codes, the unspecified cut
              spacings default  to  the  value  in  the  technology  file.  By
              default,  the  cut spacing values defined in the technology file
              are determined by rules such as minCutSpacing in the ContactCode
              section,  General  Cut  Spacing  rule in the DesignRule section,
              Adjacent and Enclosed Via Spacing rules, and so on.

       -size_by_via_area {xdistance ydistance}
              Specifies the X by Y via array area in user units.  This  option
              is mutually exclusive with the -size_by_array_dimensions option.

       -size_by_array_dimensions {columns rows}
              Specifies the number of via columns and  rows.  This  option  is
              mutually exclusive with the size_by_via_area option.

       -rotation_mode on | required | off
              Specifies  the  via rotation mode. If you specify -rotation_mode
              required, the command always rotates vias. If you specify -rota-
              tion_mode off, the command never rotates vias.

              The -rotation_mode on option rotates vias as needed; when creat-
              ing vias, the non-rotated vias will be  applied  first.  If  the
              creation  fails  due to DRC violations, the command then rotates
              the vias if they do not cause DRC violations.

              By default, the command uses -rotation_mode on.

       -align_stack true | false
              Allows via stacks to misalign.  When  creating  an  aligned  via
              stack,  the  tool  might add extra metal to some layers to align
              and center the via stack. Specify -align_stack  false  to  allow
              misalignment  and different centers for each layer. Misalignment
              reduces the addition of extra metal and saves routing resources.
              By default, the tool aligns via stacks.

DESCRIPTION
       The  set_preroute_advanced_via_rule  command defines the layer, contact
       code, and other rules for via array creation. You  can  also  use  this
       command  to  specify  a matrix of small via arrays instead of one large
       via array at wire intersections. Using smaller via  arrays  might  free
       some  routing  space.  When array size is not specified, the command by
       default will try to maximize the cut number of the via array.  If  same
       net  cut spacing violation is detected for the maximized via array, the
       command will try to reduce the array size by one row or one column (for
       larger dimension, if equal, reduce one row). If violation persists, the
       via will be removed.

       To reset all advanced via rules to their default  values,  specify  the
       set_preroute_advanced_via_rule command with no options.

       Note  that the -special_via_rule option to the create_preroute_vias and
       other preroute commands specifies the same via creation conditions  for
       all layers; the set_preroute_advanced_via_rule command supports differ-
       ent conditions for different layers.

       Use the -advanced_via_rules option  to  the  create_power_straps,  pre-
       route_standard_cells,  and  other  preroute  commands to enable the via
       strategy set by using the set_preroute_advanced_via_rule command.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The following example sets the advanced via rules  for  cut  layers  V1
       through V3. Each cut layer uses different array dimension sizes.
         prompt> set_preroute_advanced_via_rule -cut_layer V1 \
           -size_by_array_dimensions {2 1}
         prompt> set_preroute_advanced_via_rule -cut_layer V2 \
           -size_by_array_dimensions {2 2}
         prompt> set_preroute_advanced_via_rule -cut_layer V3 \
           -size_by_array_dimensions {1 1}

       The  following  example sets advanced via rules for contact codes V4_1,
       V4_2, and V4_3. The via array is spaced at the specified cut  spacings,
       not  rotated,  and is moved to center of intersecting metal rectangles.
       The example sets only one cut  spacing  for  the  single  contact  code
       "V5_1"
         prompt> set_preroute_advanced_via_rule \
            -move_via_to_center -rotation_mode off \
            -cut_spacings {0.092 0.091} \
            -contact_codes V5_1
         prompt> set_preroute_advanced_via_rule \
            -move_via_to_center -rotation_mode off \
            -cut_spacings {{0.092 0.091} {0.091 0.092} {0.094 0.096}} \
            -contact_codes {V4_1 V4_2 V4_3}

       The  following  example  resets all advanced via rules to their default
       values.
         prompt> set_preroute_advanced_via_rule

SEE ALSO
       create_power_straps(2)
       preroute_standard_cells(2)
       report_preroute_advanced_via_rule(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man create_power_straps
2.  Synopsys Commands                                        Command Reference
                              create_power_straps

NAME
       create_power_straps
              Creates power straps in a design.

SYNTAX
       status create_power_straps
               -nets collection_of_nets | -undo
               [-direction horizontal | vertical]
               [-start_at location]
               [-layer number_or_name]
               [-width distance]
               [-configure groups_and_step | groups_and_stop | step_and_stop | rows | macros | groups_and_stop | step_and_stop | rows | macros]
               [-num_groups count]
               [-step distance]
               [-stop distance]
               [-pitch_within_group distance]
               [-start_low_ends boundary | first_targets | coordinate | last_targets | offset | first_targets | coordinate | last_targets]
               [-start_low_ends_coordinate distance]
               [-start_high_ends boundary | first_targets | coordinate | last_targets | offset | first_targets | coordinate | last_targets]
               [-start_high_ends_coordinate distance]
               [-extend_low_ends to_first_target | to_boundary_and_generate_pins | force_to_boundary_and_generate_pins | off | to_boundary_and_generate_pins | force_to_boundary_and_generate_pins | off]
               [-extend_high_ends to_first_target | to_boundary_and_generate_pins | force_to_boundary_and_generate_pins | off | to_boundary_and_generate_pins | force_to_boundary_and_generate_pins | off]
               [-num_placement_strap count]
               [-increment_x_or_y distance]
               [-special_via_rule
                  [-special_via_x_offset distance]
                  [-special_via_y_offset distance]
                  [-offset_both_sides_for_special_via]
                  [-special_via_x_size distance]
                  [-special_via_y_size distance]
                  [-special_via_x_step distance]
                  [-special_via_y_step distance]]
               [-advanced_via_rules]
               [-special_rules rule_name]
               [-look_inside_std_cells
                  [-std_cells collection_of_cells]]
               [-keep_floating_wire_pieces]
               [-ignore_cell_boundary]
               [-clip_at_top_cell_boundaries]
               [-do_not_merge_targets]
               [-optimize_wire_locations]
               [-ignore_parallel_targets
                  [-define_parallel_targets_by_wire_directions]]
               [-do_not_route_over_macros]
               [-extend_for_multiple_connections
                  [-extension_gap distance]]
               [-mark_as_std_cell_pin_connections | -mark_as_ring]
               [-within_voltage_areas collection_of_voltage_areas]
               [-exclude_voltage_areas collection_of_voltage_areas]
               [-start_at_offset distance]
               [-detour_required
                  [-detour_nets collection_of_nets]
                  [-detour_jog_length_limit {distance distance}]
                  [-detour_jog_offset distance]
                  [-detour_enforce {jog_length jog_offset}]
                  [-detour_accept_all]
                  [-detour_region {{llx lly} {urx ury}}]
               [-detour_snap_on_track]
               [-detour_leading_obstructions]]

   Data Types
       collection_of_nets              collection
       location                        float
       number_or_name                  layer
       distance                        jog_offset
       count                           integer
       rule_name                       string
       collection_of_cells             collection
       collection_of_voltage_areas     collection
       jog_length                      distance in technology file units
       jog_offset                      distance in technology file units
       llx                             float
       lly                             float
       urx                             float
       ury                             float

ARGUMENTS
       -nets collection_of_nets
              Specifies  nets  on  which to create straps. You must specify at
              least one power or ground net. If  you  specify  more  than  one
              value,  separate  the  values  with  a space. This is a required
              option, unless you specify the -undo option.

       -undo  Removes straps created by the previous create_power_straps  run.
              This option supersedes all other options.

       -direction horizontal | vertical
              Specifies  the  strap direction. Valid values are horizontal and
              vertical. The default is horizontal.

       -start_at location
              Specifies the x- or y-location for the first strap. locataion is
              the  y-location  for a horizontal strap and the x-location for a
              vertical strap. The units are specified in the technology  file.
              The default location is 0.0.

       -layer number_or_name
              Specifies  the  metal  layer  on which to create straps. You can
              specify either a layerNumber or layer name from  the  technology
              file. The default is to select the first layer for the specified
              direction.

       -width distance
              Specifies the strap width. The units are specified in the  tech-
              nology file. The default width is the width of the layer.

       -configure  groups_and_step  | groups_and_stop | step_and_stop | rows |
       macros | groups_and_stop | step_and_stop | rows | macros
              Specifies  the strap configuration. Valid values are the follow-
              ing:

               o groups_and_step (default) - Places straps based on the number
                of  groups specified by the -num_groups option and the spacing
                specified by the -step option.

               o groups_and_stop - Places straps based on the number of groups
                specified  by the -num_groups option and the stop point speci-
                fied by the -stop option.  The tool uses this  information  to
                determine the strap spacing.

               step_and_stop - Places straps based on the spacing specified by
                the -step option and the stop point  specified  by  the  -stop
                option. The tool uses this information to determine the number
                of groups.

               o rows - Creates straps over the standard cell areas. The  tool
                automatically determines the strap locations.

               o  macros  -  Creates straps over the macro cell pins. The tool
                automatically determines the strap locations.

              You can specify only one of these configurations.

       -num_groups count
              Specifies the number of strap groups to create. Do not use  this
              option  if  you  are  using the step_and_stop configuration. The
              default is 1.

       -step distance
              Specifies the distance from the reference strap of one group  to
              the  reference  strap of an adjacent group. The units are speci-
              fied in the technology file.

              For vertical straps, a positive distance value places  the  next
              strap in the group to the right of the current strap; specifying
              a negative value places the next strap to the left of  the  cur-
              rent  strap.  For horizontal straps, specifying a positive value
              places the next strap above the current strap; specifying a neg-
              ative  value  places the next strap below the current strap. The
              default is 0.0. Do not use this option  if  you  are  using  the
              -configure groups_and_stop option.

       -stop distance
              Specifies  the  location  where strap placement stops. The units
              are specified in the technology file. The default is 0.0. Do not
              use  this option if you are using the -configure groups_and_step
              option.

       -pitch_within_group distance
              Specifies the distance to place between the center lines of  two
              adjacent  straps  in  the same group. The units are specified in
              the technology file.

              For vertical straps, a positive distance value places  the  next
              strap  to  the  right  of the first; a negative value places the
              next strap to the left of the first. For  horizontal  straps,  a
              positive distance value places the next strap above the first; a
              negative value places  the  next  strap  below  the  first.  The
              default  is  the  pitch  of  the layer defined in the technology
              file.

       -start_low_ends boundary | first_targets | coordinate | last_targets  |
       offset | first_targets | coordinate | last_targets
              Specifies the location for the low strap ends.  Valid  arguments
              are

               o  boundary  (default) - Places the low end of the strap at the
                core boundary.

               o first_targets - Places the low end of the strap at the  first
                target  on  the  same net.  For horizontal straps, this is the
                first target found by moving left from the initial strap.  For
                vertical straps, this is the first target found by moving down
                from the initial strap.

               o coordinate - Places the low end of the strap at  the  coordi-
                nate specified by the -start_low_ends_coordinate option.

               o  last_targets  -  Places the low end of the strap at the last
                target on the same net.  For horizontal straps,  this  is  the
                leftmost  target. For vertical straps, this is the lowest tar-
                get.

              You can specify only one of these values.

       -start_low_ends_coordinate distance
              Specifies the coordinate for the low end of the strap when using
              -start_low_ends coordinate. The units are specified in the tech-
              nology file. For horizontal straps, distance  is  the  x-coordi-
              nate.  For  vertical  straps,  distance is the y-coordinate. The
              default is 0.0.

       -start_high_ends boundary | first_targets | coordinate | last_targets |
       offset | first_targets | coordinate | last_targets
              Specifies the location for the high strap ends.  Valid arguments
              are

               o  boundary (default) - Places the high end of the strap at the
                core boundary.

               o first_targets - Places the high end of the strap at the first
                target  on  the  same  net. For horizontal straps, this is the
                first target found by moving right from the initial strap. For
                vertical  straps,  this is the first target found by moving up
                from the initial strap.

               o coordinate - Places the high end of the strap at the  coordi-
                nate specified by the -start_high_ends_coordinate option.

               o  last_targets  - Places the high end of the strap at the last
                target on the same net.  For horizontal straps,  this  is  the
                rightmost  target.  For  vertical  straps, this is the highest
                target.

              You can specify only one of these values.

       -start_high_ends_coordinate distance
              Specifies the coordinate for the high  end  of  the  strap  when
              using  the  -start_high_ends coordinate option. The unit for the
              distance value is the unit specified in the technology file. For
              horizontal  straps,  distance  is the x-coordinate. For vertical
              straps, distance is the y-coordinate. The default is 0.0.

       -extend_low_ends  to_first_target  |  to_boundary_and_generate_pins   |
       force_to_boundary_and_generate_pins   |  off  |  to_boundary_and_gener-
       ate_pins | force_to_boundary_and_generate_pins | off
              Specifies how to extend straps from the low end.   Valid  values
              are

               o  to_first_target  (default) - Extends the straps from the low
                end until the strap reaches the first target on the same  net.

               o  to_boundary_and_generate_pins  - Extends the straps from the
                low end until the strap reaches the core boundary, then gener-
                ates  a  pin. The strap stops when it reaches the first target
                on the same net.

               o force_to_boundary_and_generate_pins - Extends the straps from
                the  low  end  until the strap reaches the core boundary, then
                generates a pin. The strap does not stop when it  reaches  the
                first target on the same net.

               o off - Does not extend the straps from the low end.

              You can specify only one of these values.

       -extend_high_ends  to_first_target  |  to_boundary_and_generate_pins  |
       force_to_boundary_and_generate_pins  |  off  |   to_boundary_and_gener-
       ate_pins | force_to_boundary_and_generate_pins | off
              Specifies  how to extend straps from the high end.  Valid values
              are

               o to_first_target (default) Extends the straps  from  the  high
                end  until the strap reaches the first target on the same net.

               o to_boundary_and_generate_pins - Extends the straps  from  the
                high  end  until  the strap reaches the core boundary and then
                generates a pin. The strap stops when  it  reaches  the  first
                target on the same net.

               o force_to_boundary_and_generate_pins - Extends the straps from
                the high end until the strap reaches  the  core  boundary  and
                then  generates a pin. The strap does not stop when it reaches
                the first target on the same net.

               o off - Does not extend the straps from the high end.

              You can specify only one of these values.

       -num_placement_strap count
              Specifies the number of times to place strap  groups.  You  must
              specify a value of 1 or greater. The default is 1.

       -increment_x_or_y distance
              Specifies  the  distance  between the first strap and subsequent
              straps when the -num_placement_strap option is greater  than  1.
              The  units  are specified in the technology file. For horizontal
              straps, distance is the y-distance. For  vertical  straps,  dis-
              tance is the x-distance. The default is 0.0.

       -special_via_rule
              Creates  a  matrix  of small via arrays instead of one large via
              array at wire intersections. Using smaller via arrays might free
              some  routing area. Specify the x- and y-offsets, x- and y-size,
              and x- and y- step values by using the special via  options.  If
              the specified values violate design rules, vias are not created.

       -special_via_x_offset distance
              Specifies the x-offset from the lower-left corner  of  the  wire
              intersection  area  where  you  want to create the first special
              via. The units are specified in the technology file. The default
              is 0.0.

       -special_via_y_offset distance
              Specifies  the  y-offset  from the lower-left corner of the wire
              intersection area where you want to  create  the  first  special
              via. The units are specified in the technology file. The default
              is 0.0.

       -offset_both_sides_for_special_via
              Applies the x- and y-offsets to both lower-left and  upper-right
              corner  of  the  wire intersection area. By default, the offsets
              are applied only to the lower-left corner of the wire  intersec-
              tion area.

       -special_via_x_size distance
              Specifies  the  horizontal  size  of the special via arrays. The
              units are specified in the technology file. The default is  0.0.

       -special_via_y_size distance
              Specifies the vertical size of the special via arrays. The units
              are specified in the technology file. The default is 0.0.

       -special_via_x_step distance
              Specifies the horizontal distance  between  the  left  sides  of
              adjacent  via  arrays. The units are specified in the technology
              file. The default is 0.0. A via is not created if  it  causes  a
              DRC violations.

       -special_via_y_step distance
              Specifies  the  vertical  distance  between  the bottom sides of
              adjacent via arrays. The units are specified in  the  technology
              file.  The default is 0.0. A via is not created if it would vio-
              late DRC violations.

       -advanced_via_rules
              Uses    advanced    via    rules    set    by    the    set_pre-
              route_advanced_via_rule command.

       -special_rules rule_name
              Uses  special  rules  set by the set_preroute_special_rules com-
              mand. You must enter the rule name  string  exactly  as  it  was
              specified in the -name option of set_preroute_special_rules com-
              mand.

       -look_inside_std_cells
              Creates vias to connect straps to pins inside standard cells. By
              default, straps are not connected to pins inside standard cells.

       -std_cells collection_of_cells
              Specifies the collection of standard cells to consider when con-
              necting  the  straps.  If  collection_of_cells is not empty, the
              -look_inside_std_cells option is turned  on  automatically,  and
              only  pins  of the specified cells are considered as targets for
              the straps.

              If this option is omitted and -look_inside_std_cells  is  speci-
              fied, all standard cells are considered. If this option is omit-
              ted and -look_inside_std_cells is  not  specified,  no  standard
              cells are considered.

              If  the collection is empty and -look_inside_std_cells is speci-
              fied, all standard cells are considered. If  the  collection  is
              empty  omitted  and  -look_inside_std_cells is not specified, no
              standard cells are considered.

       -keep_floating_wire_pieces
              Keeps extra wire pieces that are not connected to other wires.

       -ignore_cell_boundary
              Keeps out-of-bound straps.

       -clip_at_top_cell_boundaries
              Cuts straps at the top cell boundaries. This is useful to create
              straps within the boundaries of a rectilinear design.

       -do_not_merge_targets
              Disables  merging of target objects before creating connections.

       -optimize_wire_locations
              Saves more tracks for detail routing by  adjusting  the  created
              straps by small distances horizontally or vertically.

       -ignore_parallel_targets
              Does  not connect parallel targets. By default, parallel targets
              are defined by their x- and y-dimensions. A target  is  parallel
              to  a  horizontal  strap  if  its x-dimension is greater than or
              equal to its y-dimension. A target is  parallel  to  a  vertical
              strap  if  its  y-dimension  is  greater than or equal to its x-
              dimension.

       -define_parallel_targets_by_wire_directions
              Defines parallel targets by their wire directions. A  target  is
              parallel  to  a  horizontal strap if its wires are horizontal. A
              target is parallel to a vertical strap if its wires  are  verti-
              cal. By default, parallel targets are defined by their x- and y-
              dimensions.

       -do_not_route_over_macros
              Prevents the prerouter from generating wires over  macro  cells.
              If  you  specify this option, the tool removes the segments of a
              strap that route over a macro.

       -extend_for_multiple_connections
              Extends the low and high ends of a strap to connect more targets
              on  the same net. The extension continues until either there are
              no more targets in the respective direction or the  next  target
              exceeds  the  spacing  threshold specified by the -extension_gap
              option.

       -extension_gap distance
              Connects adjacent targets that  are  closer  than  the  distance
              value.  The unit for the distance value is the unit specified in
              the technology file. This value is the space threshold for  mul-
              tiple connections.

       -mark_as_std_cell_pin_connections
              Marks    the    created    power    or    ground    straps    as
              "pg_std_cell_pin_conn" type. By default, straps are created  and
              marked  as  "pg_strap"  type.  This option is mutually exclusive
              with the -mark_as_ring option.

       -mark_as_ring
              Marks the created power or ground straps as "pg_ring"  type.  By
              default,  straps are created and marked as "pg_strap" type. This
              option is mutually exclusive with the -mark_as_std_cell_pin_con-
              nections option.

       -within_voltage_areas collection_of_voltage_areas
              Specifies  the  voltage  areas  where  the command should create
              straps.  The -nets option is required in conjunction  with  this
              option. By default, the command uses the entire design area.

              When  you  specify this option, the -start_at option is disabled
              and  the  -start_at_offset  option  is  used  instead.  See  the
              -start_at_offset option description for more details. The refer-
              encing origin is the lower left corner of the bounding  box  for
              each  voltage  area.  Note for multiple disjoint areas with same
              voltage domain, the referencing origin  is  different  for  each
              disjoint area.

              When  straps  are  created  within  voltage area boundaries, the
              boundaries are treated as zero-space route guides.  Any  aligned
              straps  are  disjoint  around  the boundaries except straps that
              connect to the same net such as ground net.

       -exclude_voltage_areas collection_of_voltage_areas
              Specifies the voltage areas where the command should NOT  create
              straps.  By default, the exclude voltage area is empty.

       -start_at_offset distance
              Specifies  the x- or y-offset of the first strap with respect to
              the origin of specified objects.  Currently,  this  option  only
              supports voltage area objects. Offset is the y-offset for a hor-
              izontal strap and the x-offset for a vertical strap.  The  units
              are  specified  in  the technology file. This option can only be
              used  in   conjunction   with   the   -within_voltage_areas   or
              -exclude_voltage_areas options. The default location is 0.0.

       -detour_required
              Enable  the detour feature for creating straps. Depending on the
              behavior  you  require,  you  must  specify  additional   detour
              options.  If  you  omit  the  -detour_required  option, the tool
              silently ignores all other detour-related options.

       -detour_nets collection_of_nets
              Specifies the nets on which to create detours. When you  specify
              nets  by  using the -detour_nets option, detours are not created
              on  other  nets.  If  you  specify  -detour_required  and   omit
              -detour_nets,  all  nets  specified  with  the  -nets option can
              receive detours.

       -detour_jog_length_limit {distance distance}
              Specifies restrictions on  the  length  of  jogs  for  automatic
              detour  creation.  The  first  value  is for a north or east jog
              while the second value is for a south or west jog.  Both  values
              should  be  positive. A zero value prohibits a jog in the corre-
              sponding direction. The length might be reduced to avoid  a  DRC
              violation.  The defaults are 0 and detours are not automatically
              added.

       -detour_jog_offset distance
              Specifies the distance between an automatically inserted jog and
              its  obstruction. The value should be positive. The offset value
              might be increased to accommodate minimal spacing  requirements.
              The default is 0 and minimal spacing is used.

       -detour_enforce {jog_length jog_offset}
              Specifies  the  location  for  a  forced detour. The first value
              specifies the jog length, the second  value  specifies  the  jog
              offset.  If  you  specify this option, the values are applied if
              the jog cannot be inserted automatically by the  tool.  The  jog
              length  can  be positive or negative. Use a positive value for a
              north or east jog, use a negative value for a south or west jog.
              The  jog  length should be greater than the width of the straps.
              By default, no detours are forced.

       -detour_accept_all
              Allow any forced detour, even if it  creates  a  DRC  error.  By
              default, only DRC-clean detours are created.

       -detour_region {{llx lly} {urx ury}}
              Specifies  the  area  where  detours  are  allowed.  The area is
              defined as a single rectangle bounded by the lower  left  corner
              coordinate  and  upper  right corner coordinate. All coordinates
              are in technology file units. If  specified,  only  obstructions
              inside  the  area  can  cause  detours.  The detour is a partial
              detour and the remaining strap is removed.  The  south  or  west
              edge  of  a jog aligns with the boundary of the area and any jog
              offset is ignored. The strap shape stops at the  north  or  east
              boundary.  By default, straps detours can be either full detours
              or partial detours, depending on the environment.

       -detour_snap_on_track
              Specifies that the centerline of the  strap  is  placed  on  the
              routing  track.  This  request  is  ignored  if  you specify the
              -detour_enforce option, if snapping to the track prevents a DRC-
              clean  detour,  or  if  the preferred direction differs from the
              direction of the strap. By default, the tool does not  snap  the
              centerline of the strap to the routing track.

       -detour_leading_obstructions
              Specifies  whether to detour over leading obstructions (south or
              west edge) if either the auto-detour or enforced-detour criteria
              is  met.  By  default, no detour is placed over leading obstruc-
              tions.

DESCRIPTION
       This command creates power straps in a design. This command can connect
       power straps to the closest power or ground ring at or beyond both ends
       of the straps. All pins generated by prerouting commands are marked  as
       fixed  to prevent the create_power_straps command from moving them dur-
       ing other operations. You can use the set_preroute_drc_strategy command
       to  change the internal application of DRC rules. Use a few wide straps
       rather than many thin straps to improve placement quality and  decrease
       the placement runtime.

       Note: You must use the derive_pg_connection command to create the port-
       to-net connections for power and  ground  nets  that  are  not  in  the
       netlist.

   Multicorner-Multimode Support
       This command has no dependency on scenario-specific information.

EXAMPLES
       The  following example creates 7 vertical power straps for the VDDC and
       VSSC nets. Straps are created on  the  M3  layer  with  a  width  of  5
       microns.  The  first strap starts at x-coordinate 530 with a spacing of
       100 uu between straps. The low ends start at the y-coordinate 280.  The
       high  ends end at y-coordinate 980. The straps extend for multiple con-
       nections in the radius of 1000 uu.

         prompt> create_power_straps \
         -nets {VDDC VSSC} \
         -direction vertical \
         -layer M3 \
         -width 5 \
         -start_at 530 \
         -num_placement_strap 7 \
         -increment_x_or_y 100 \
         -start_low_ends coordinate \
         -start_low_ends_coordinate 280.0 \
         -start_high_ends coordinate \
         -start_high_ends_coordinate 980.0 \
         -extend_for_multiple_connections \
         -extension_gap 1000

       The following example creates power straps configured by placement rows
       following the set of special rules named "specGS".

         prompt> create_power_straps \
         -nets {VSS VDD} \
         -configure rows \
         -direction horizontal \
         -layer PM \
         -width 8.0 \
         -pitch_within_group 10.08 \
         -step 20.16 \
         -extend_low_ends to_first_target \
         -extend_high_ends to_first_target \
         -keep_floating_wire_pieces \
         -ignore_parallel_targets \
         -special_rules specGS

       For  more  information  about  special rules, see the set_preroute_spe-
       cial_rules man page.

       The following example creates power straps  configured  by  macro  cell
       pins following the set of special rules named "specLMVmem".

         prompt> create_power_straps \
         -nets {VDD VSS} \
         -configure macros \
         -direction vertical \
         -layer M4 \
         -advanced_via_rules \
         -extend_low_ends off \
         -extend_high_ends off \
         -special_rules specLMVmem

       For  more  information  about  special rules, see the set_preroute_spe-
       cial_rules man page.

       The following example shows creates power straps for different  voltage
       areas.

         prompt> create_power_straps \
         -nets VDDC \
         -direction vertical \
         -configure step_and_stop \
         -layer M7 \
         -width 0.53 \
         -start_at_offset 0.960 \
         -stop 165.480 \
         -step 18.18 \
         -within_voltage_areas {VA1 VA3 VA4}

SEE ALSO
       create_pad_rings(2)
       create_preroute_vias(2)
       create_rectangular_rings(2)
       preroute_instances(2)
       preroute_standard_cells(2)
       report_preroute_drc_strategy(2)
       set_distributed_route(2)
       set_preroute_advanced_via_rule(2)
       set_preroute_drc_strategy(2)
       set_preroute_special_rules(2)
       verify_pg_nets(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man cts_prects_upsize_gates
3.  Attributes and Variables                                 Command Reference
                            cts_prects_upsize_gates

NAME
       cts_prects_upsize_gates
              Specifies  for  the  compile_clock_tree  command  to up-size the
              original clock gates to the LEQ cell with  the  highest  driving
              strength, when set to true.

TYPE
       Boolean

DEFAULT
       true

GROUP
       cts_variables

DESCRIPTION
       This  variable  specifies for the compile_clock_tree command to up-size
       the original clock gates to the  LEQ  cell  with  the  highest  driving
       strength.   Up-sizing  sizes  all the original gates present in a clock
       tree to the highest available driving LEQ cell.  Gates marked as  fixed
       or  dont size are not sized.  Currently, this variable also sizes inte-
       grated clock gatings (ICGs).

       In some cases LEQ cells might not be  available  in  the  library.   In
       other cases, LEQ cells might be marked as dont use.  In the later case,
       you are advised to remove the dont_use attribute from library cells.

       This variable controls only the up-sizing during the preprocessing step
       of  the  compile_clock_tree  command.  This is different from the gate-
       sizing optimization step during Embedded-CTO and Standalone-CTO.

SEE ALSO
       compile_clock_tree(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man cts_move_clock_gate
3.  Attributes and Variables                                 Command Reference
                              cts_move_clock_gate

NAME
       cts_move_clock_gate
              This  variable controls the initial relocation of existent clock
              gates in compile_clock_tree.

TYPE
       Boolean

DEFAULT
       true

GROUP
       cts_variables

DESCRIPTION
       When this variable is set to  true,  compile_clock_tree  will  relocate
       existent  clock gates to their fanout centers before synthesis in order
       to improve insertion delay and clock skew.

SEE ALSO
       compile_clock_tree(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> man compile_clock_tree
2.  Synopsys Commands                                        Command Reference
                              compile_clock_tree

NAME
       compile_clock_tree
              Builds a clock tree based on the clock tree definition.

SYNTAX
       status compile_clock_tree
               [-clock_trees name_or_source_pin_list]
               [-config_file_read read_filename]
               [-config_file_write write_filename]
               [-operating_condition min | max | min_max]
               [-high_fanout_net net_or_pin_list
                  [-sync_phase rise | fall | both]]
               [-insert_self_gating]

   Data Types
       name_or_source_pin_list     list
       net_or_pin_list             list

ARGUMENTS
       -clock_trees name_or_source_pin_list
              Specifies the clock trees to compile.

              To  specify  the  clock trees, use either the user-assigned sym-
              bolic name or the name of the source (port or pin) of each clock
              tree.   If  you  use the source to specify a clock tree, it must
              match the full name of the clock tree root pin or port passed to
              the set_clock_tree_options command with the -clock_trees option.

              By default, the command  is  applied  to  all  currently-defined
              clock trees.

       -config_file_read read_filename
              Specifies  the  name of the configuration file used to build the
              clock tree.

              To learn the format of the clock tree configuration,  build  the
              clock  tree, and then write out the configuration file.  You can
              edit the file to obtain the desired configuration.

              If you are already familiar with the format of  the  clock  tree
              configuration  file,  you  can  run  clock tree synthesis with a
              specified configuration file.

              The configuration can be soft, meaning that only the  number  of
              levels  is specified, and the clock tree synthesis engine honors
              the specification.  The number  of  buffers  at  each  level  is
              determined by clock tree synthesis.

              The  configuration  can also be hard, meaning that the number of
              levels and number of buffers at each level  are  specified.  You
              can also specify the buffer types.

              The  clock tree synthesis engine honors all configuration speci-
              fications.

       -config_file_write write_filename
              Writes out the clock tree configuration  levels  and  number  of
              buffers  at  each level after clock tree synthesis has been com-
              pleted.

       -operating_condition  min | max | min_max
              Specifies the operating condition.

              The default is max.

       -high_fanout_net net_or_pin_list
              Inserts a balanced buffer tree  for  the  specified  high-fanout
              signal  nets  using the same techniques as in clock tree synthe-
              sis.  You can specify either the net or the nets'  driving  pins
              in the net_or_pin_list argument.

              A common use of this option is to buffer set or reset nets.

       -sync_phase rise | fall | both
              Balances skew at rise, fall, or both edges.

              By default, the tool uses rise in skew calculation.

              You can use this option only with the -high_fanout_net option.

       -insert_self_gating
              Inserts  XOR  self-gating  logic on all clocks during clock tree
              synthesis prior to clock tree construction.

              For best results, you should provide the clock activity informa-
              tion  by  reading  a SAIF file with the read_saif command before
              running the compile_clock_tree command.

              If  per  clock  synthesis  is  required,  you  should  use   the
              -insert_self_gating  option  only  during  the first run of this
              command.

DESCRIPTION
       This command synthesizes a clock tree and updates the  design  database
       with the compiled clock trees.

       Before running the compile_clock_tree command,
       o  Use  the set_clock_tree_options command to specify clock trees to be
         synthesized.
       o Use the set_clock_tree_references command to define which clock  tree
         buffers  or  inverters can be used for those clocks during clock tree
         synthesis.

       By default, design rule checking (DRC) violations beyond exception pins
       are fixed at the end of clock tree synthesis.

   Multicorner-Multimode Support
       This  command uses information from the clock tree synthesis scenarios.
       All scenarios enabled as clock tree synthesis scenarios  are  activated
       for  clock  tree  synthesis  and  are  returned  to their current state
       (active or inactive) after clock tree synthesis.

       The clocks that need to be  compiled  need  to  be  specified  as  sce-
       nario_name@clock_name in -clock_trees option where,
       scenario_name: Scenario with cts_mode set to true.
       clock_name: Clock present in that scenario.

EXAMPLES
       The  following  example  shows  a clock tree with root CLK1 implemented
       with a set of specified library  references  to  be  used  as  buffers.
       Clock CLK1 is compiled and updated in the design netlist.

         prompt> set_clock_tree_options -clock_trees [get_ports CLK1]
         prompt> set_clock_tree_references -references {buffer1x buffer2x}

       The  following example shows a command that performs clock tree synthe-
       sis for clock CLK1:

         prompt> compile_clock_tree -clock_trees CLK1

       The following example shows a command that reports the  structural  and
       timing characteristics of the compiled clock tree:

         prompt> report_clock_tree -clock_trees CLK1

       The  following example shows a command that performs clock tree synthe-
       sis for clock CLK1 under scenario scene1:

         prompt> compile_clock_tree -clock_trees scene1@CLK1

SEE ALSO
       report_clock_tree(2)
       set_clock_tree_options(2)
       set_clock_tree_references(2)
       read_saif(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man set_clock_tree_options
2.  Synopsys Commands                                        Command Reference
                            set_clock_tree_options

NAME
       set_clock_tree_options
              Specifies  clock  tree  synthesis  constraints  and  options for
              clocks in the design.

SYNTAX
       status set_clock_tree_options
               [-clock_trees clock_sources]
               [-layer_list layer_names]
               [-layer_list_for_sinks layer_names
               | -use_leaf_routing_rule_for_sinks count]
               [-target_early_delay insertion_delay]
               [-target_skew skew]
               [-max_capacitance capacitance]
               [-max_transition transition_time]
               [-max_fanout fanout]
               [-max_rc_delay_constraint delay
               | -max_rc_scale_factor scale_factor]
               [-routing_rule ndr_rule
               | -use_default_routing_for_sinks count]
               [-leaf_max_transition transition_time]
               [-use_leaf_max_transition_on_exceptions true | false]
               [-use_leaf_max_transition_on_macros true | false]
               [-routing_rule_for_sinks ndr_rule
               | -use_leaf_routing_rule_for_sinks count]
               [-buffer_relocation true | false]
               [-buffer_sizing true | false]
               [-gate_relocation true | false]
               [-gate_sizing true | false]
               [-logic_level_balance true | false]
               [-ocv_clustering true | false]
               [-ocv_path_sharing true | false]
               [-advanced_drc_fixing true | false]
               [-config_file_read file_name]
               [-config_file_write file_name]
               [-insert_boundary_cell true | false]
               [-operating_condition min | min_max | max]

   Data Types
       clock_sources       collection
       layer_names         list
       count               integer
       insertion_delay     float
       skew                float
       capacitance         float
       transition_time     float
       fanout              integer
       delay               float
       scale_factor        float
       ndr_rule            string
       file_name           string

ARGUMENTS
       -clock_trees clock_sources
              Specifies the clock trees on which to set  the  specified  clock
              tree  options.   You specify the clock trees by using the source
              of each clock tree. The source can be a top-level  design  input
              port, a hierarchical port, or a library cell instance pin.

              If  you  do  not  specify the -clock_trees option, the specified
              clock tree options apply to all clocks defined  in  the  design.
              Note  that  some clock tree options are global options and apply
              to all clocks in  the  design  regardless  of  the  -clock_trees
              option.  These  global  options are noted in the option descrip-
              tion.

       -layer_list layer_names
              Specifies the layers that can be used for routing the clock nets
              in  the  specified  clock  trees.  If the list has more than two
              elements, the lower layer should appear before the upper  layer.

              By default, all routing layers can be used for clock nets.

       -layer_list_for_sinks layer_names
              Specifies the layers that can be used for routing the clock leaf
              nets in the specified clock trees.  If the list  has  more  than
              two  elements,  the  lower  layer should appear before the upper
              layer. This option overrides the -layer_list option when routing
icc_shell> 
icc_shell> man compile_clock_tree
2.  Synopsys Commands                                        Command Reference
                              compile_clock_tree

NAME
       compile_clock_tree
              Builds a clock tree based on the clock tree definition.

SYNTAX
       status compile_clock_tree
               [-clock_trees name_or_source_pin_list]
               [-config_file_read read_filename]
               [-config_file_write write_filename]
               [-operating_condition min | max | min_max]
               [-high_fanout_net net_or_pin_list
                  [-sync_phase rise | fall | both]]
               [-insert_self_gating]

   Data Types
       name_or_source_pin_list     list
       net_or_pin_list             list

ARGUMENTS
       -clock_trees name_or_source_pin_list
              Specifies the clock trees to compile.

              To  specify  the  clock trees, use either the user-assigned sym-
              bolic name or the name of the source (port or pin) of each clock
              tree.   If  you  use the source to specify a clock tree, it must
              match the full name of the clock tree root pin or port passed to
              the set_clock_tree_options command with the -clock_trees option.

              By default, the command  is  applied  to  all  currently-defined
              clock trees.

       -config_file_read read_filename
              Specifies  the  name of the configuration file used to build the
              clock tree.

              To learn the format of the clock tree configuration,  build  the
              clock  tree, and then write out the configuration file.  You can
              edit the file to obtain the desired configuration.

              If you are already familiar with the format of  the  clock  tree
              configuration  file,  you  can  run  clock tree synthesis with a
              specified configuration file.

              The configuration can be soft, meaning that only the  number  of
              levels  is specified, and the clock tree synthesis engine honors
              the specification.  The number  of  buffers  at  each  level  is
              determined by clock tree synthesis.

              The  configuration  can also be hard, meaning that the number of
              levels and number of buffers at each level  are  specified.  You
              can also specify the buffer types.

              The  clock tree synthesis engine honors all configuration speci-
              fications.

       -config_file_write write_filename
              Writes out the clock tree configuration  levels  and  number  of
              buffers  at  each level after clock tree synthesis has been com-
              pleted.

       -operating_condition  min | max | min_max
              Specifies the operating condition.

              The default is max.

       -high_fanout_net net_or_pin_list
              Inserts a balanced buffer tree  for  the  specified  high-fanout
              signal  nets  using the same techniques as in clock tree synthe-
              sis.  You can specify either the net or the nets'  driving  pins
              in the net_or_pin_list argument.

              A common use of this option is to buffer set or reset nets.

       -sync_phase rise | fall | both
              Balances skew at rise, fall, or both edges.

              By default, the tool uses rise in skew calculation.

              You can use this option only with the -high_fanout_net option.

       -insert_self_gating
              Inserts  XOR  self-gating  logic on all clocks during clock tree
              synthesis prior to clock tree construction.

              For best results, you should provide the clock activity informa-
              tion  by  reading  a SAIF file with the read_saif command before
              running the compile_clock_tree command.

              If  per  clock  synthesis  is  required,  you  should  use   the
              -insert_self_gating  option  only  during  the first run of this
              command.

DESCRIPTION
       This command synthesizes a clock tree and updates the  design  database
       with the compiled clock trees.

       Before running the compile_clock_tree command,
       o  Use  the set_clock_tree_options command to specify clock trees to be
         synthesized.
       o Use the set_clock_tree_references command to define which clock  tree
         buffers  or  inverters can be used for those clocks during clock tree
         synthesis.

       By default, design rule checking (DRC) violations beyond exception pins
       are fixed at the end of clock tree synthesis.

   Multicorner-Multimode Support
       This  command uses information from the clock tree synthesis scenarios.
       All scenarios enabled as clock tree synthesis scenarios  are  activated
       for  clock  tree  synthesis  and  are  returned  to their current state
       (active or inactive) after clock tree synthesis.

       The clocks that need to be  compiled  need  to  be  specified  as  sce-
       nario_name@clock_name in -clock_trees option where,
       scenario_name: Scenario with cts_mode set to true.
       clock_name: Clock present in that scenario.

EXAMPLES
       The  following  example  shows  a clock tree with root CLK1 implemented
       with a set of specified library  references  to  be  used  as  buffers.
       Clock CLK1 is compiled and updated in the design netlist.

         prompt> set_clock_tree_options -clock_trees [get_ports CLK1]
         prompt> set_clock_tree_references -references {buffer1x buffer2x}

       The  following example shows a command that performs clock tree synthe-
       sis for clock CLK1:

         prompt> compile_clock_tree -clock_trees CLK1

       The following example shows a command that reports the  structural  and
       timing characteristics of the compiled clock tree:

         prompt> report_clock_tree -clock_trees CLK1

       The  following example shows a command that performs clock tree synthe-
       sis for clock CLK1 under scenario scene1:

         prompt> compile_clock_tree -clock_trees scene1@CLK1

SEE ALSO
       report_clock_tree(2)
       set_clock_tree_options(2)
       set_clock_tree_references(2)
       read_saif(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man clock_opt
2.  Synopsys Commands                                        Command Reference
                                   clock_opt

NAME
       clock_opt
              Performs  clock  tree  synthesis, routing of clock nets, extrac-
              tion, optimization,  and  hold  time  violation  fixing  on  the
              design.   There  is  also  an option to perform interclock delay
              balancing.

SYNTAX
       status clock_opt
               [-only_psyn]
               [-fix_hold_all_clocks]
               [-inter_clock_balance]
               [-update_clock_latency]
               [-operating_condition   min | max | min_max]
               [-only_cts]
               [-clock_trees name_of_clocks]
               [-optimize_dft]
               [-continue_on_missing_scandef]
               [-no_clock_route]
               [-only_hold_time]
               [-area_recovery]
               [-size_only | -in_place_size_only]
               [-power]
               [-insert_self_gating]
               [-congestion]
               [-concurrent_clock_and_data]
               [-incremental_concurrent_clock_and_data]

ARGUMENTS
       -only_psyn
              Performs optimization only.

       -fix_hold_all_clocks
              Performs hold time violation fixing for all clocks during incre-
              mental optimization.

              By  default, the clock_opt command does not perform hold fixing.

       -inter_clock_balance
              Performs interclock delay balancing.

              By default, the clock_opt command does  not  perform  interclock
              delay balancing.

       -update_clock_latency
              Updates  the  latencies  on real and virtual clock objects after
              clock tree synthesis, clock tree optimization, interclock  delay
              balancing (if enabled), and clock tree detail routing.

              This  option  effectively executes the set_clock_latency command
              internally for the clock objects and uses the insertion delay of
              the   clock   tree   as  the  latency  value.  If  you  run  the
              set_latency_adjustment_options command before the clock_opt com-
              mand,  the  directives  are  obeyed.  If  you do not specify any
              directives,  only  the  latencies  of  real  clock  objects  are
              updated.   The  update mechanism uses the insertion delay of the
              clock tree as the latency value.

       -operating_condition  min | max | min_max
              Specifies the operating condition. The default is max.

       -only_cts
              Performs only clock tree synthesis, clock tree optimization, and
              clock tree routing.

       -clock_trees name_of_clocks
              Performs  clock  tree  synthesis  and optimization on the clocks
              specified in the order specified.

       -optimize_dft
              Enables clock-aware scan reordering.

              The reordering tries to minimize the number of buffer  crossings
              in  the  scan  chains. Minimizing the number of buffer crossings
              can reduce hold time violations in the scan chains.

              When you specify this option, you must  load  the  SCANDEF  data
              that  defines  the scan chains before running the clock_opt com-
              mand.  You can use the get_scan_chains command to check  if  the
              SCANDEF data is available.

              For  best results, first use the place_opt -optimize_dft command
              to perform placement-aware scan reordering.

              By default, the clock_opt command does not perform scan reorder-
              ing.

       -continue_on_missing_scandef
              Continues  placement when the design contains scan chains but no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an  error  message. If you specify this option, the command con-
              tinues with a warning and results in reduced quality-of-results.

       -no_clock_route
              Disables routing of clock nets.

       -only_hold_time
              Performs only hold time fixing after clock tree synthesis.

              If  you  specify the -fix_hold_all_clocks option, the tool fixes
              hold time violations for all clocks.  Otherwise, the tool  fixes
              hold  time  violations  only  for  the clocks specified with the
              set_fix_hold command.

       -area_recovery
              Enables area recovery for the cells not on the  timing  critical
              paths.

       -size_only
              Restricts  post  clock  tree  synthesis  optimization  to sizing
              changes only.  Optimization procedures that insert new cells and
              remove cells are disabled.

              See  the  description  for  the  -in_place_size_only  option for
icc_shell> 
icc_shell> man psynopt
2.  Synopsys Commands                                        Command Reference
                                    psynopt

NAME
       psynopt
              Performs incremental optimization on the design.

SYNTAX
       status psynopt
               [-area_recovery]
               [-only_area_recovery]
               [-congestion]
               [-no_design_rule | -only_design_rule]
               [-only_hold_time]
               [-in_place_size_only]
               [-size_only]
               [-preserve_footprint]
               [-power]
               [-only_power]
               [-ignore_scan]
               [-continue_on_missing_scandef]
               [-refine_critical_paths max_path_count]

   Data Types
       max_path_count     int

ARGUMENTS
       -area_recovery
              Enables  area  recovery for the cells not on the timing critical
              paths.

              By default, the command does not perform area recovery.

       -only_area_recovery
              Specifies that only area recovery is  performed.   Timing  opti-
              mization and logical design rule fixing are not performed.

              This  option  cannot  be  used with the -only_design_rule or the
              -only_hold_time options.

       -congestion
              Enables congestion removal algorithms for improved  routability.

              By default, the command does not perform congestion removal.

       -no_design_rule
              Disables logical design rule fixing.

              When  you  specify this option, the tool exits before fixing the
              design rule violations. You can check  the  results  in  a  con-
              straint report before fixing the violations.

              By default, the command performs both logical design rule fixing
              and timing optimization before exiting.

              The -no_design_rule and -only_design_rule options  are  mutually
              exclusive.

       -only_design_rule
              Specifies  that  only  logical  design rule fixing is performed.
              Timing optimization is not performed.

              By default, the command performs both logical design rule fixing
              and timing optimization before exiting.

              The  -no_design_rule  and -only_design_rule options are mutually
              exclusive.

       -only_hold_time
              Specifies that only hold time violations are fixed.

              When you use this option, you must use the set_fix_hold  command
              to  specify  the  clocks  on  which  to perform hold time fixing
              before running the psynopt command.

              This option cannot be used with the -no_design_rule option.

       -in_place_size_only
              Restricts optimization to in-place sizing changes  only.   Opti-
              mization  procedures  that insert new cells and remove cells are
              disabled.

              With the -in_place_size_only option, sizing changes are  further
              constrained for minimal engineering change order (ECO) placement
              changes.  For example, a cell is  sized  to  improve  timing  or
              design  rule costs only if the newly-sized cell can fit into any
              available space adjacent to  the  original  cell  location.  The
              resulting transformation is verified to ensure that it is legal.

              The -in_place_size_only  option  is  recommended  for  postroute
              flow,  so  optimization  changes are constrained for minimal ECO
              changes.   The  psynopt  command  with  the  -in_place_size_only
              option  should be run as a final step after the design is final-
              ized and legal, to provide extra quality of results (QoR)  with-
              out causing significant ECO changes. Because the optimization on
              the entire design is highly constrained, significant QoR  change
              are not expected with the -in_place_size_only option.

              The  -size_only  and  -in_place_size_only  options  are mutually
              exclusive.

       -size_only
              Restricts optimization to  sizing  changes  only.   Optimization
              procedures  that insert new cells and remove cells are disabled.

              See the  description  for  the  -in_place_size_only  option  for
              information about how to further constrain sizing changes.

              The  -size_only  and  -in_place_size_only  options  are mutually
              exclusive.

       -preserve_footprint
              Restricts optimization to footprint-preserving sizing only.

              Footprint-preserving  sizing  is  done  by  using  a   footprint
              attribute  added  by  vendors.  When the tool sizes the cell, in
              addition to checking that the size of the cell is the  same,  it
              also  checks that the number of pins, the names of the pins, and
              the footprint attribute are the same.  However,  the  tool  does
              not check that the physical pin locations are the same; the tool
              assumes that this is done by library vendor when  it  added  the
              footprint attribute.

       -power
              Enables  power-aware timing optimization and leakage-power opti-
              mization.

              The psynopt command can perform leakage-power optimization based
              on either the multiple-threshold-voltage constraint or the leak-
              age values of the library cells. To perform leakage-power  opti-
              mization based on the multiple-threshold-voltage constraint, use
              the set_multi_vth_constraint command to define  this  constraint
              before  running  the psynopt command.  If this constraint is not
              defined, the tool bases the leakage-power  optimization  on  the
              leakage values of the library cells.

              When you specify this option for a multicorner-multimode design,
              you must use the  set_scenario_options  command  to  select  the
              leakage scenarios before running the psynopt command.

              By default, neither power-aware timing optimization nor leakage-
              power optimization is performed. To perform  power-aware  timing
              optimization without leakage-power optimization, do not use this
              option, but set the icc_preroute_power_aware_optimization  vari-
              able to true.

       -only_power
              Enables only leakage-power optimization.

       -ignore_scan
              Ignores scan chain connections during placement.

              When  you  specify  this  option, you must load the SCANDEF data
              that defines the scan chains before running the psynopt command.
              You  can use the get_scan_chains command to check if the SCANDEF
              data is available.

       -continue_on_missing_scandef
              Continues placement when the design contains scan chains but  no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an error message. If you specify this option, the  command  con-
              tinues with a warning and results in reduced QoR.

              Setting  this option enables the placer to continue and consider
              the scan chains regardless of the setting  of  the  -ignore_scan
              option.

       -refine_critical_paths max_path_count
              Specifies the number of worst critical paths on which to perform
              register optimization. Register optimization moves registers and
              combinational logic along timing paths to minimize timing viola-
              tions.

              The default is 0.

              This  option  cannot  be  used  with  the   -only_area_recovery,
              -only_design_rule, -only_hold_time, and -only_power options.

DESCRIPTION
       The  psynopt  command  performs incremental preroute or postroute opti-
       mization on the current design.   The  output  of  this  command  is  a
       legally placed netlist.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.  If you enable
       power optimization, you must select the leakage scenarios  before  run-
       ning the psynopt command.

EXAMPLES
       The following example runs the psynopt command in the preroute flow:

         prompt> psynopt

SEE ALSO
       create_buffer_tree(2)
       create_placement(2)
       legalize_placement(2)
       place_opt(2)
       set_multi_vth_constraint(2)
       set_scenario_options(2)
       icc_preroute_power_aware_optimization(3)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> 
icc_shell> man route_zrt_group
2.  Synopsys Commands                                        Command Reference
                                route_zrt_group

NAME
       route_zrt_group
              Performs  routing on a group of nets in the design using Zroute.
              You should use this command before signal routing to route crit-
              ical nets such as clock nets or timing-critical nets. Do not use
              this command to connect  nets  after  signal  routing  (use  the
              route_zrt_eco command instead).

SYNTAX
       status route_zrt_group
               [-max_detail_route_iterations num]
               [-nets nets | -all_clock_nets]
               [-stop_after_global_route true | false]
               [-reuse_existing_global_route true | false]
               [-utilize_dangling_wires true | false]
               [-exploration true | false]
               [-route_nondefault_nets_first true | false]
               -from_file file_name

   Data Types
       num          integer
       nets         collection

ARGUMENTS
       -max_detail_route_iterations num
              Specifies  the maximum number of detail routing iterations.  You
              can specify an integer between 1 and 1000.

              By default, the maximum number  of  iterations  for  the  detail
              routing command (40) is used.

       -nets nets
              Specifies the nets to be routed.

              You must specify the nets on which to run this command by speci-
              fying  at  least  one   of   the   following   options:   -nets,
              -all_clock_nets,  and  -from_file. The -nets and -all_clock_nets
              options are mutually exclusive; you can specify  only  one.  You
              can  specify  the  -from_file  option  in  addition to the -nets
              option.

       -all_clock_nets
              Routes all clock nets.

              You must specify the nets on which to run this command by speci-
              fying   at   least   one   of   the  following  options:  -nets,
              -all_clock_nets,   and   -from_file.   If   you   specify    the
              -all_clock_nets   option,   you  cannot  specify  the  -nets  or
              -from_file option.

       -stop_after_global_route true | false
              Controls whether the router stops after global routing  or  con-
              tinues all the way to detail routing.

              The  default value is false, which means that the router contin-
              ues all the way to detail routing.

       -reuse_existing_global_route true | false
              Enables (true) or disables (false) incremental global routing.

              By default (false),  the  global  router  ignores  all  existing
              global routes from the design for initial routing.

              If  you set this option to true, the global router considers and
              reuses the existing global routes.

       -utilize_dangling_wires true | false
              Controls whether the router tries to reuse the  dangling  routes
              as much as possible.

              The default value is true.

       -exploration true | false
              Specifies  what routing quality the router should use for global
              routing.

              By default (false), the router routes the design in normal  mode
              and uses higher effort to reduce congestion.

              If  you  set  this option to true, the global router ignores the
              blockages on blocked pins when  routing  the  design  and  makes
              other  simplifying assumptions in order to complete global rout-
              ing quickly. Designs can be  unlegalized  in  exploration  mode.
              Exploration  mode  will also disable timing or cross talk driven
              routing.  The resulting congestion map  shows  the  location  of
              congestion  hot  spots  in  the  floorplan.  Absolute congestion
              statistics might differ from the  normal  global  router,  espe-
              cially if the design is not clean.  Exploration mode is intended
              to be used only in floorplan exploration or design planning. Its
              purpose is to give a quick picture of floorplan routing problems
              as a guide for placement improvements. You should not run  track
              assignment  or  detail  routing based on exploration mode global
              routing. If you do not  also  set  the  -stop_after_global_route
              true  option  when  you enable exploration mode, the router sets
              this option automatically and issues an  error  indicating  that
              exploration  mode  global  routing should not be used for detail
              routing.

       -route_nondefault_nets_first true | false
              Specifies whether to route  the  nets  with  nondefault  routing
              rules before the nets that use the default routing rule.

              When false (the default), nets with nondefault routing rules are
              not routed before the nets without nondefault routing rules.

              When true, the tool performs global routing and track assignment
              first  on  nets  with nondefault routing rules, and then on nets
              that use the default routing rule.

       -from_file file_name
              Routes the nets specified by name in the file.

              If the specified file either does not exist or does not  contain
              any  valid  nets,  the tool generates an error and indicates the
              source of the problem.

              You must specify the nets on which to run this command by speci-
              fying   at   least   one   of   the  following  options:  -nets,
              -all_clock_nets, and -from_file. You can specify the  -from_file
              option  in addition to the -nets; however, the -from_file option
              cannot be used with the -all_clock_nets option.

DESCRIPTION
       The route_zrt_group command routes  a  specified  group  of  nets.  You
       should  use  this  command before signal routing to route critical nets
       such as clock nets or timing-critical nets. After  signal  routing,  do
       not  use  this  command  to connect nets; use the route_zrt_eco command
       instead.

   Multicorner-Multimode Support
       This command uses information from all active scenarios.

EXAMPLES
       The following command performs routing for all  clock  nets  using  the
       -max_detail_route_iterations and -utilize_dangling_wires options.

         prompt> route_zrt_group -all_clock_nets \
            -max_detail_route_iterations 6 \
            -utilize_dangling_wires true

SEE ALSO
       route_zrt_global(2)
       route_zrt_track(2)
       route_zrt_detail(2)
       route_zrt_eco(2)

                         Version L-2016.03-SP5-1
            Copyright (c) 2016 Synopsys, Inc. All rights reserved.
icc_shell> 
icc_shell> 
icc_shell> man clock_opt_feasibility
2.  Synopsys Commands                                        Command Reference
                             clock_opt_feasibility

NAME
       clock_opt_feasibility
              Performs  optimization  feasibility analysis on the design after
              clock tree synthesis.

SYNTAX
       status clock_opt_feasibility
               [-congestion]
               [-clock_route]
               [-only_psyn]
               [-fix_hold_all_clocks]
               [-inter_clock_balance]
               [-update_clock_latency]
               [-operating_condition   min | max | min_max]
               [-only_cts]
               [-optimize_dft]
               [-continue_on_missing_scandef]
               [-no_clock_route]
               [-only_hold_time]
               [-area_recovery]
               [-size_only]
               [-in_place_size_only]
               [-power]
               [-no_legalize_large_displacement]
               [-large_displacement_threshold number_of_cell_rows]

   Data Types
       number_of_cell_rows     int

ARGUMENTS
       -congestion
              Performs congestion removal during the optimization  feasibility
              flow.

              By default, the command does not perform congestion removal.

       -clock_route
              Performs clock net routing after optimization.

              By default, the command does not perform clock routing.

       -only_psyn
              Performs optimization only.

       -fix_hold_all_clocks
              Performs hold time violation fixing for all clocks during incre-
              mental optimization.

              By default, the command does not perform hold fixing.

       -inter_clock_balance
              Performs interclock delay balancing.

              By default, the command does not perform interclock  delay  bal-
              ancing.

       -update_clock_latency
              Updates  the  latencies  on real and virtual clock objects after
              clock tree synthesis, clock tree optimization, interclock  delay
              balancing (if enabled), and clock tree detail routing.

              This  effectively  executes the set_clock_latency command inter-
              nally for the clock objects and uses the insertion delay of  the
              clock   tree   as   the   latency   value.   If   you   run  the
              set_latency_adjustment_options command before the clock_opt_fea-
              sibility  command,  the  directives  are  obeyed.  If you do not
              specify any directives, only the latencies of real clock objects
              are  updated.  The  update mechanism uses the insertion delay of
              the clock tree as the latency value.

       -operating_condition  min | max | min_max
              Specifies the operating condition.

              The default is max.

       -only_cts
              Performs only clock tree synthesis and clock tree  optimization.

       -optimize_dft
              Enables clock-aware scan reordering.

              The  reordering tries to minimize the number of buffer crossings
              in the scan chains. Minimizing the number  of  buffer  crossings
              can reduce hold time violations in the scan chains.

              When  you  specify  this  option, you must load the SCANDEF data
              that defines the scan chains before running the  clock_opt  com-
              mand.   You  can use the get_scan_chains command to check if the
              SCANDEF data is available.

              For best results, first use the place_opt -optimize_dft  command
              to perform placement-aware scan reordering.

       -continue_on_missing_scandef
              Continues  placement when the design contains scan chains but no
              SCANDEF data.

              By default, missing SCANDEF data causes the command to exit with
              an  error  message. If you specify this option, the command con-
              tinues with a warning and results in reduced  quality-of-results
              (QoR).

       -no_clock_route
              Disables routing of clock nets. This is the default behavior.

       -only_hold_time
              Performs only hold time fixing after clock tree synthesis.

              If  you  specify the -fix_hold_all_clocks option, the tool fixes
              hold time violations for all clocks.  Otherwise, the tool  fixes
              hold  time  violations  only  for  the clocks specified with the
              set_fix_hold command.

       -area_recovery
              Enables area recovery for the cells not on the  timing  critical
              paths.

       -size_only
              Restricts  post  clock  tree  synthesis  optimization  to sizing
              changes only.  Optimization procedures that insert new cells and
              remove cells are disabled.

              The  -size_only  and  -in_place_size_only  options  are mutually
              exclusive.  See  the  description  for  the  -in_place_size_only
              option for additional information about how to further constrain
              sizing changes.

       -in_place_size_only
              Restricts post clock tree  synthesis  optimization  to  in-place
              sizing  changes  only.   Optimization procedures that insert new
              cells and remove cells are disabled.

              With the -in_place_size_only option, sizing changes are  further
              constrained for minimal engineering change order (ECO) placement
              changes.  For example, a cell is  sized  to  improve  timing  or
              design  rule costs only if the newly-sized cell can fit into any
              available space adjacent to the  original  cell  location.   The
              resulting transformation is verified to ensure that it is legal.

       -power
              Performs the enabled clock tree power optimizations before clock
              tree  synthesis,  as  well  as  leakage-power optimization after
              clock tree synthesis.

              The supported clock tree  power  optimizations  are  power-aware
              placement  and  clock  gate restructuring. To enable power-aware
              placement, use the set_optimize_pre_cts_power_options command to
              set  the  -low_power_placement  option  to true. When you enable
              power-aware placement, the tool performs incremental  switching-
              activity-based  power-aware placement. For the best results from
              power-aware placement, you should specify the same coarse place-
              ment  setup, such as the placer_max_cell_density_threshold vari-
              able,  used  in  the  place_opt  command  before   running   the
              clock_opt_feasibility command.

              To   enable   clock   gate   restructuring,  use  the  set_opti-
              mize_pre_cts_power_options command to set the -merge_clock_gates
              option to true.

              The  clock_opt_feasibility  command  can  perform  leakage-power
              optimization based on either the multiple-threshold-voltage con-
              straint  or  the leakage values of the library cells. To perform
              leakage-power optimization based on the multiple-threshold-volt-
              age  constraint,  use  the  set_multi_vth_constraint  command to
              define this constraint before running the  clock_opt_feasibility
              command.  If  this constraint is not defined, the tool bases the
              leakage-power optimization on the leakage values of the  library
              cells.
